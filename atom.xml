<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qiwenming</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qiwenming.github.io/"/>
  <updated>2018-01-18T13:51:53.591Z</updated>
  <id>http://qiwenming.github.io/</id>
  
  <author>
    <name>qiwenming</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSH与SSM学习之hibernate25——批量抓取</title>
    <link href="http://qiwenming.github.io/hibernate/25/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/25/2017/11/19/</id>
    <published>2017-11-19T13:52:16.000Z</published>
    <updated>2018-01-18T13:51:53.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate25——批量抓取"><a href="#SSH与SSM学习之hibernate25——批量抓取" class="headerlink" title="SSH与SSM学习之hibernate25——批量抓取"></a>SSH与SSM学习之hibernate25——批量抓取</h1><h2 id="一、添加数据"><a href="#一、添加数据" class="headerlink" title="一、添加数据"></a>一、添加数据</h2><p>我们现在需要添加数据，所以的配置使用默认的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 添加测试数据</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void addData()&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line">    //-------------------------------------------</span><br><span class="line">    for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">        Company c = new Company();</span><br><span class="line">        c.setName(&quot;新公司_&quot;+i);</span><br><span class="line">        Employee emp = new Employee();</span><br><span class="line">        emp.setName(&quot;wiming_&quot;+i);</span><br><span class="line">        emp.setCompany(c);</span><br><span class="line"></span><br><span class="line">        session.save(c);</span><br><span class="line">        session.save(emp);</span><br><span class="line">    &#125;</span><br><span class="line">    //-------------------------------------------</span><br><span class="line">    t.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们的有5个公司，每个公司有1个员工。</p><hr><h2 id="二、测试代码"><a href="#二、测试代码" class="headerlink" title="二、测试代码"></a>二、测试代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 批量抓取</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line">    //-------------------------------------------</span><br><span class="line">    Query query = session.createQuery(&quot;from Company&quot;);</span><br><span class="line">    List&lt;Company&gt; list = query.list();</span><br><span class="line">    System.out.println(&quot;---------one--------&quot;);</span><br><span class="line">    for (Company c : list) &#123;</span><br><span class="line">        System.out.println(c.getEmps());</span><br><span class="line">        System.out.println(&quot;---------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //-------------------------------------------</span><br><span class="line">    t.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、分析"><a href="#三、分析" class="headerlink" title="三、分析"></a>三、分析</h2><p>我们知道我们的表中有5个公司。上面的测试代码，在默认情况下，除了查询到公司的数据以外，还会查询5次。这是因为我们的员工的数据是使用懒加载的（默认的）。也就是说每循环一次，就会去查询一次数据。这样感觉效率很低下。<br>因此有一个属性 <strong>batch-size</strong>，它的意思就是，一次抓取多少条数据。那上面的例子举例，如果<strong>batch-size=3</strong>，那么意思就是说第一次循环的时候，查询了Company的3个对象的集合数据，第一次循环以后，第一、二、三的集合数据就查询出来，不用再去查了。到了第四的时候，再去查询3条，由于数据只有两条了，所以最后只查询2个对象的集合。这样我查询集合其实只是2次而已。</p><hr><h2 id="三、默认情况下的查询"><a href="#三、默认情况下的查询" class="headerlink" title="三、默认情况下的查询"></a>三、默认情况下的查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        company0_.id as id1_0_,</span><br><span class="line">        company0_.name as name2_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_company company0_</span><br><span class="line">---------one--------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        emps0_.com_id as com_id3_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_1_,</span><br><span class="line">        emps0_.name as name2_1_1_,</span><br><span class="line">        emps0_.com_id as com_id3_1_1_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee emps0_ </span><br><span class="line">    where</span><br><span class="line">        emps0_.com_id=?</span><br><span class="line">[Employee&#123;em_id=1, name=&apos;wiming_0&apos;&#125;]</span><br><span class="line">---------------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        emps0_.com_id as com_id3_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_1_,</span><br><span class="line">        emps0_.name as name2_1_1_,</span><br><span class="line">        emps0_.com_id as com_id3_1_1_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee emps0_ </span><br><span class="line">    where</span><br><span class="line">        emps0_.com_id=?</span><br><span class="line">[Employee&#123;em_id=2, name=&apos;wiming_1&apos;&#125;]</span><br><span class="line">---------------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        emps0_.com_id as com_id3_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_1_,</span><br><span class="line">        emps0_.name as name2_1_1_,</span><br><span class="line">        emps0_.com_id as com_id3_1_1_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee emps0_ </span><br><span class="line">    where</span><br><span class="line">        emps0_.com_id=?</span><br><span class="line">[Employee&#123;em_id=3, name=&apos;wiming_2&apos;&#125;]</span><br><span class="line">---------------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        emps0_.com_id as com_id3_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_1_,</span><br><span class="line">        emps0_.name as name2_1_1_,</span><br><span class="line">        emps0_.com_id as com_id3_1_1_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee emps0_ </span><br><span class="line">    where</span><br><span class="line">        emps0_.com_id=?</span><br><span class="line">[Employee&#123;em_id=4, name=&apos;wiming_3&apos;&#125;]</span><br><span class="line">---------------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        emps0_.com_id as com_id3_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_1_,</span><br><span class="line">        emps0_.name as name2_1_1_,</span><br><span class="line">        emps0_.com_id as com_id3_1_1_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee emps0_ </span><br><span class="line">    where</span><br><span class="line">        emps0_.com_id=?</span><br><span class="line">[Employee&#123;em_id=5, name=&apos;wiming_4&apos;&#125;]</span><br><span class="line">---------------</span><br></pre></td></tr></table></figure><hr><h2 id="四、Company-hbm-xml添加batch-size"><a href="#四、Company-hbm-xml添加batch-size" class="headerlink" title="四、Company.hbm.xml添加batch-size"></a>四、Company.hbm.xml添加batch-size</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate03.domain&quot; &gt;</span><br><span class="line">    &lt;class name=&quot;Company&quot; table=&quot;tb_company&quot;&gt;</span><br><span class="line">        &lt;id name=&quot;id&quot;&gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- batch-size: 抓取集合的数量为3.</span><br><span class="line">            抓取客户的集合时,一次抓取几个公司的员工集合.</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;set name=&quot;emps&quot; batch-size=&quot;3&quot;&gt;</span><br><span class="line">            &lt;key column=&quot;com_id&quot;&gt;&lt;/key&gt;</span><br><span class="line">            &lt;one-to-many class=&quot;Employee&quot;&gt;&lt;/one-to-many&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="五、批量抓取"><a href="#五、批量抓取" class="headerlink" title="五、批量抓取"></a>五、批量抓取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        company0_.id as id1_0_,</span><br><span class="line">        company0_.name as name2_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_company company0_</span><br><span class="line">---------one--------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        emps0_.com_id as com_id3_1_1_,</span><br><span class="line">        emps0_.em_id as em_id1_1_1_,</span><br><span class="line">        emps0_.em_id as em_id1_1_0_,</span><br><span class="line">        emps0_.name as name2_1_0_,</span><br><span class="line">        emps0_.com_id as com_id3_1_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee emps0_ </span><br><span class="line">    where</span><br><span class="line">        emps0_.com_id in (</span><br><span class="line">            ?, ?, ?</span><br><span class="line">        )</span><br><span class="line">[Employee&#123;em_id=1, name=&apos;wiming_0&apos;&#125;]</span><br><span class="line">---------------</span><br><span class="line">[Employee&#123;em_id=2, name=&apos;wiming_1&apos;&#125;]</span><br><span class="line">---------------</span><br><span class="line">[Employee&#123;em_id=3, name=&apos;wiming_2&apos;&#125;]</span><br><span class="line">---------------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        emps0_.com_id as com_id3_1_1_,</span><br><span class="line">        emps0_.em_id as em_id1_1_1_,</span><br><span class="line">        emps0_.em_id as em_id1_1_0_,</span><br><span class="line">        emps0_.name as name2_1_0_,</span><br><span class="line">        emps0_.com_id as com_id3_1_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee emps0_ </span><br><span class="line">    where</span><br><span class="line">        emps0_.com_id in (</span><br><span class="line">            ?, ?</span><br><span class="line">        )</span><br><span class="line">[Employee&#123;em_id=4, name=&apos;wiming_3&apos;&#125;]</span><br><span class="line">---------------</span><br><span class="line">[Employee&#123;em_id=5, name=&apos;wiming_4&apos;&#125;]</span><br><span class="line">---------------</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate25——批量抓取&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate25——批量抓取&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate25——批量抓取&quot;&gt;&lt;/a&gt;SSH与S
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate24——关联级别加载策略之属性关联加载策略</title>
    <link href="http://qiwenming.github.io/hibernate/24/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/24/2017/11/19/</id>
    <published>2017-11-19T13:52:15.000Z</published>
    <updated>2018-01-18T13:51:53.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate24——关联级别加载策略之属性关联加载策略"><a href="#SSH与SSM学习之hibernate24——关联级别加载策略之属性关联加载策略" class="headerlink" title="SSH与SSM学习之hibernate24——关联级别加载策略之属性关联加载策略"></a>SSH与SSM学习之hibernate24——关联级别加载策略之属性关联加载策略</h1><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>现在我们说的是 属性关联加载策略。和之前的 <a href="http://blog.csdn.net/qiwenmingshiwo/article/details/78067743" target="_blank" rel="noopener">SSH与SSM学习之hibernate23——关联级别加载策略之集合关联加载策略</a> 区别是</p><p>集合关联说的是：通过一个对象，获取到与它关联的集合数据，例如：通过公司，获取到员工（多个），这是一个集合</p><p>属性关联说的是：通过一个对象，获取到与它关联的对象数据，例如：通过员工，获取到公司（一个），这是一个属性</p><p>属性关联使用到的是 <strong>lazy</strong>和<strong>fetch</strong></p><hr><h2 id="二、laze和fetch的取值"><a href="#二、laze和fetch的取值" class="headerlink" title="二、laze和fetch的取值"></a>二、laze和fetch的取值</h2><p><strong>lazy</strong>叫做懒加载或者延迟加载，取值如下</p><table><thead><tr><th>取值</th><th>说明</th></tr></thead><tbody><tr><td>proxy:</td><td>由相关类的类级别加载策略决定（true或者false）</td></tr><tr><td>false:</td><td>立即加载</td></tr></tbody></table><p>fetch（抓取策略），决定加载策略.使用什么类型的sql语句加载集合数据。取值如下</p><table><thead><tr><th>取值</th><th>说明</th></tr></thead><tbody><tr><td>select</td><td>(默认值): 单表查询加载</td></tr><tr><td>join:</td><td>使用多表查询加载集合</td></tr></tbody></table><p>下面我们分为二者的属性值两两配对（笛卡尔积）测试</p><p>第一行代表，lazy的取值</p><p>第一列代表，fetch的取值</p><table><thead><tr><th></th><th>proxy=tue</th><th>proxy=false</th><th>false</th></tr></thead><tbody><tr><td><strong>select</strong></td><td>select,true</td><td>select,false</td><td>select,false</td></tr><tr><td><strong>join</strong></td><td>join,ture</td><td>join,false</td><td>join,false</td></tr></tbody></table><p>我们知道 proxy 由相关类的类加载策略决定的，当proxy=false的时候，和 属性关联的lazy为false是一样的。</p><p>所以我们只需要验证下面的四种情况</p><table><thead><tr><th></th><th>proxy=tue</th><th>proxy=false</th></tr></thead><tbody><tr><td><strong>select</strong></td><td>select,true</td><td>select,false</td></tr><tr><td><strong>join</strong></td><td>join,ture</td><td>join,false</td></tr></tbody></table><hr><h2 id="三、Company-hbm-xml配置"><a href="#三、Company-hbm-xml配置" class="headerlink" title="三、Company.hbm.xml配置"></a>三、Company.hbm.xml配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate03.domain&quot; &gt;</span><br><span class="line">    &lt;!--测试中所说的 proxy的值为其实就是下面这个lazy的值--&gt;</span><br><span class="line">    &lt;class name=&quot;Company&quot; table=&quot;tb_company&quot; lazy=&quot;true&quot;&gt;</span><br><span class="line">      .....</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="四、Employee-hbm-xml"><a href="#四、Employee-hbm-xml" class="headerlink" title="四、Employee.hbm.xml"></a>四、Employee.hbm.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate03.domain&quot; &gt;</span><br><span class="line">    &lt;class name=&quot;Employee&quot; table=&quot;tb_employee&quot; &gt;</span><br><span class="line">        &lt;id name=&quot;em_id&quot;  &gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            fetch 决定加载的sql语句</span><br><span class="line">                select: 使用单表查询</span><br><span class="line">                join : 多表查询</span><br><span class="line">            lazy  决定加载时机</span><br><span class="line">                false: 立即加载</span><br><span class="line">                proxy: 由Company的类级别加载策略决定.</span><br><span class="line">         --&gt;</span><br><span class="line">       &lt;many-to-one name=&quot;company&quot; column=&quot;com_id&quot; class=&quot;Company&quot; fetch=&quot;select&quot; lazy=&quot;proxy&quot;/&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="五、测试代码"><a href="#五、测试代码" class="headerlink" title="五、测试代码"></a>五、测试代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 所有的测试代码都是一样的</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test1()&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line">    //----------------------------------------------</span><br><span class="line">    //获取到员工</span><br><span class="line">    Employee employee = session.get(Employee.class,1L);</span><br><span class="line">    System.out.println(&quot;-------------one--------------&quot;);</span><br><span class="line">    //获取到公司</span><br><span class="line">    Company c = employee.getCompany();</span><br><span class="line">    System.out.println(&quot;-------------two--------------&quot;);</span><br><span class="line">    //使用公司</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    //----------------------------------------------</span><br><span class="line">    t.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="六、fetch为select-proxy对应的对象取值为true测试"><a href="#六、fetch为select-proxy对应的对象取值为true测试" class="headerlink" title="六、fetch为select, proxy对应的对象取值为true测试"></a>六、fetch为select, proxy对应的对象取值为true测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        employee0_.em_id as em_id1_1_0_,</span><br><span class="line">        employee0_.name as name2_1_0_,</span><br><span class="line">        employee0_.com_id as com_id3_1_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee employee0_ </span><br><span class="line">    where</span><br><span class="line">        employee0_.em_id=?</span><br><span class="line">-------------one--------------</span><br><span class="line">-------------two--------------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        company0_.id as id1_0_0_,</span><br><span class="line">        company0_.name as name2_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_company company0_ </span><br><span class="line">    where</span><br><span class="line">        company0_.id=?</span><br><span class="line">Company&#123;id=1, name=&apos;百鸟公司&apos;&#125;</span><br></pre></td></tr></table></figure><p>fetch为select, proxy对应的对象取值为true。单表查询，使用了懒加载，属性只有使用的时候采取查询。</p><hr><h2 id="七、fetch为select-proxy对应的对象取值为false测试"><a href="#七、fetch为select-proxy对应的对象取值为false测试" class="headerlink" title="七、fetch为select, proxy对应的对象取值为false测试"></a>七、fetch为select, proxy对应的对象取值为false测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        employee0_.em_id as em_id1_1_0_,</span><br><span class="line">        employee0_.name as name2_1_0_,</span><br><span class="line">        employee0_.com_id as com_id3_1_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee employee0_ </span><br><span class="line">    where</span><br><span class="line">        employee0_.em_id=?</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        company0_.id as id1_0_0_,</span><br><span class="line">        company0_.name as name2_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_company company0_ </span><br><span class="line">    where</span><br><span class="line">        company0_.id=?</span><br><span class="line">-------------one--------------</span><br><span class="line">-------------two--------------</span><br><span class="line">Company&#123;id=1, name=&apos;百鸟公司&apos;&#125;</span><br></pre></td></tr></table></figure><p>fetch为select, proxy对应的对象取值为false。单表查询，直接查询数据。使用的时候，直接使用。</p><hr><h2 id="八、fetch为join测试"><a href="#八、fetch为join测试" class="headerlink" title="八、fetch为join测试"></a>八、fetch为join测试</h2><p>fetch为join的时候，lazy失效。使用多表查询，直接加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        employee0_.em_id as em_id1_1_0_,</span><br><span class="line">        employee0_.name as name2_1_0_,</span><br><span class="line">        employee0_.com_id as com_id3_1_0_,</span><br><span class="line">        company1_.id as id1_0_1_,</span><br><span class="line">        company1_.name as name2_0_1_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee employee0_ </span><br><span class="line">    left outer join</span><br><span class="line">        tb_company company1_ </span><br><span class="line">            on employee0_.com_id=company1_.id </span><br><span class="line">    where</span><br><span class="line">        employee0_.em_id=?</span><br><span class="line">-------------one--------------</span><br><span class="line">-------------two--------------</span><br><span class="line">Company&#123;id=1, name=&apos;百鸟公司&apos;&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="九、结论"><a href="#九、结论" class="headerlink" title="九、结论"></a>九、结论</h2><p>结论:为了提高效率.fetch的选择上应选择select. lazy的取值应选择 true. 全部使用默认值.</p><hr><h2 id="十、no-session问题解决-扩大session的作用范围"><a href="#十、no-session问题解决-扩大session的作用范围" class="headerlink" title="十、no-session问题解决: 扩大session的作用范围."></a>十、no-session问题解决: 扩大session的作用范围.</h2><p>我们使用懒加载的策略，那么查询完成以后，session就关闭了。这个时候我们的使用到了属性，这个时候由于是懒加载，所以回去查询数据，然而session已经关闭了，那么就会抛出 no-session 的异常。</p><p>对于这个问题的解决，就是扩大session的作用范围。打开session和关闭session 都放到 Filter中。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170922235655607?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate24——关联级别加载策略之属性关联加载策略&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate24——关联级别加载策略之属性关联加载策略&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hi
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate23——关联级别加载策略之集合关联加载策略</title>
    <link href="http://qiwenming.github.io/hibernate/23/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/23/2017/11/19/</id>
    <published>2017-11-19T13:52:14.000Z</published>
    <updated>2018-01-18T13:51:53.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate23——关联级别加载策略之集合关联加载策略"><a href="#SSH与SSM学习之hibernate23——关联级别加载策略之集合关联加载策略" class="headerlink" title="SSH与SSM学习之hibernate23——关联级别加载策略之集合关联加载策略"></a>SSH与SSM学习之hibernate23——关联级别加载策略之集合关联加载策略</h1><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>关联级别加载策略，其实就是在关联查询中，使用<strong>lazy</strong>和<strong>fetch</strong>的策略。</p><p>比如说我们查询一个公司，然后通过公司查询到员工这就是关联，反之亦然。</p><p>这个和我们前面的 <strong>类级别加载策略</strong> 使用上的区别是：</p><p>我们的类级别加载策略使用在 <class> 中</class></p><p>然后我们的关联级别是用在设置关联的地方，比如一对多我们用在<set>中。</set></p><hr><h2 id="二、lazy和fetch的取值"><a href="#二、lazy和fetch的取值" class="headerlink" title="二、lazy和fetch的取值"></a>二、lazy和fetch的取值</h2><p><strong>lazy</strong>叫做懒加载或者延迟加载，取值如下</p><table><thead><tr><th>取值</th><th>说明</th></tr></thead><tbody><tr><td>true(默认值):</td><td>延迟加载,懒加载</td></tr><tr><td>false:</td><td>立即加载</td></tr><tr><td>extra:</td><td>极其懒惰</td></tr></tbody></table><p>fetch（抓取策略），决定加载策略.使用什么类型的sql语句加载集合数据。取值如下</p><table><thead><tr><th>取值</th><th>说明</th></tr></thead><tbody><tr><td>select</td><td>(默认值): 单表查询加载</td></tr><tr><td>join:</td><td>使用多表查询加载集合</td></tr><tr><td>subselect:</td><td>使用子查询加载集合</td></tr></tbody></table><p>下面我们分为二者的属性值两两配对（笛卡尔积）测试</p><p>第一行代表，lazy的取值</p><p>第一列代表，fetch的取值</p><table><thead><tr><th></th><th>true</th><th>false</th><th>extra</th></tr></thead><tbody><tr><td><strong>select</strong></td><td>select,true</td><td>select,false</td><td>select,extra</td></tr><tr><td><strong>join</strong></td><td>join,ture</td><td>join,false</td><td>join,extra</td></tr><tr><td><strong>subselect</strong></td><td>subselect,true</td><td>subselect,true</td><td>subselect,extra</td></tr></tbody></table><hr><h2 id="三、配置文件-Company-hbm-xml"><a href="#三、配置文件-Company-hbm-xml" class="headerlink" title="三、配置文件 Company.hbm.xml"></a>三、配置文件 Company.hbm.xml</h2><p>测试的时候，修改的就是 <set>中的 lazy和fetch</set></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate03.domain&quot; &gt;</span><br><span class="line">    &lt;class name=&quot;Company&quot; table=&quot;tb_company&quot;&gt;</span><br><span class="line">        &lt;id name=&quot;id&quot;&gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            lazy属性: 决定是否延迟加载</span><br><span class="line">                true(默认值): 延迟加载,懒加载</span><br><span class="line">                false: 立即加载</span><br><span class="line">                extra: 极其懒惰</span><br><span class="line">            fetch属性: 决定加载策略.使用什么类型的sql语句加载集合数据</span><br><span class="line">                select(默认值): 单表查询加载</span><br><span class="line">                join: 使用多表查询加载集合</span><br><span class="line">                subselect:使用子查询加载集合</span><br><span class="line">         --&gt;</span><br><span class="line"> &lt;!--测试的时候，修改的就是下面 lazy和fetch的值--&gt;</span><br><span class="line">        &lt;set name=&quot;emps&quot; lazy=&quot;true&quot; fetch=&quot;select&quot;&gt;</span><br><span class="line">            &lt;key column=&quot;com_id&quot;&gt;&lt;/key&gt;</span><br><span class="line">            &lt;one-to-many class=&quot;Employee&quot;&gt;&lt;/one-to-many&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><h2 id="四、fetch为select-lazy为-true-false-extra-测试"><a href="#四、fetch为select-lazy为-true-false-extra-测试" class="headerlink" title="四、fetch为select , lazy为 true | false | extra 测试"></a>四、fetch为select , lazy为 true | false | extra 测试</h2><h3 id="4-1-测试代码"><a href="#4-1-测试代码" class="headerlink" title="4.1 测试代码"></a>4.1 测试代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 关联级测试，集合关联</span><br><span class="line"> * fetch:select</span><br><span class="line"> * lazy:true 使用时才加载集合数据</span><br><span class="line"> * lazy:false 立即记载集合数据</span><br><span class="line"> * lazy:extra 极其懒惰.与懒加载效果基本一致. 如果只获得集合的size.只查询集合的size(count语句)</span><br><span class="line"> * 这里测试的是，通过公司查询公司的员工</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test3()&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line">    //------------------------------</span><br><span class="line">    //获取到公司</span><br><span class="line">    Company c = session.get(Company.class,1L);</span><br><span class="line">    System.out.println(&quot;------------第一个分割线-------------&quot;);</span><br><span class="line">    //获取这个公司的员工（关联）</span><br><span class="line">    Set&lt;Employee&gt; emps = c.getEmps();</span><br><span class="line">    System.out.println(&quot;------------第二个分割线-------------&quot;);</span><br><span class="line">    System.out.println(emps.size());</span><br><span class="line">    System.out.println(&quot;------------第三个分割线-------------&quot;);</span><br><span class="line">    System.out.println(emps);</span><br><span class="line"></span><br><span class="line">    //------------------------------</span><br><span class="line">    t.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-2-fetch为select-lazy为-true-打印结果"><a href="#4-2-fetch为select-lazy为-true-打印结果" class="headerlink" title="4.2 fetch为select , lazy为 true 打印结果"></a>4.2 fetch为select , lazy为 true 打印结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        company0_.id as id1_0_0_,</span><br><span class="line">        company0_.name as name2_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_company company0_ </span><br><span class="line">    where</span><br><span class="line">        company0_.id=?</span><br><span class="line">------------第一个分割线-------------</span><br><span class="line">------------第二个分割线-------------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        emps0_.com_id as com_id3_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_1_,</span><br><span class="line">        emps0_.name as name2_1_1_,</span><br><span class="line">        emps0_.com_id as com_id3_1_1_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee emps0_ </span><br><span class="line">    where</span><br><span class="line">        emps0_.com_id=?</span><br><span class="line">2</span><br><span class="line">------------第三个分割线-------------</span><br><span class="line">[Employee&#123;em_id=2, name=&apos;周小龙&apos;&#125;, Employee&#123;em_id=1, name=&apos;李晓飞&apos;&#125;]</span><br></pre></td></tr></table></figure><p>我们可以看到 fetch为select , lazy为 true 的时候，我们查询公司的时候，只查询了公司的信息，没有查询员工的信息，只有使用员工的集合的时候，采取查询。使用了懒加载。</p><hr><h3 id="4-3-fetch为select-lazy为-false-打印结果"><a href="#4-3-fetch为select-lazy为-false-打印结果" class="headerlink" title="4.3 fetch为select , lazy为 false 打印结果"></a>4.3 fetch为select , lazy为 false 打印结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        company0_.id as id1_0_0_,</span><br><span class="line">        company0_.name as name2_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_company company0_ </span><br><span class="line">    where</span><br><span class="line">        company0_.id=?</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        emps0_.com_id as com_id3_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_1_,</span><br><span class="line">        emps0_.name as name2_1_1_,</span><br><span class="line">        emps0_.com_id as com_id3_1_1_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee emps0_ </span><br><span class="line">    where</span><br><span class="line">        emps0_.com_id=?</span><br><span class="line">------------第一个分割线-------------</span><br><span class="line">------------第二个分割线-------------</span><br><span class="line">2</span><br><span class="line">------------第三个分割线-------------</span><br><span class="line">[Employee&#123;em_id=2, name=&apos;周小龙&apos;&#125;, Employee&#123;em_id=1, name=&apos;李晓飞&apos;&#125;]</span><br></pre></td></tr></table></figure><p>fetch为select , lazy为 false ，不使用懒加载，会直接加载数据。</p><hr><h3 id="4-4-fetch为select-lazy为-extra-打印结果"><a href="#4-4-fetch为select-lazy为-extra-打印结果" class="headerlink" title="4.4 fetch为select , lazy为 extra 打印结果"></a>4.4 fetch为select , lazy为 extra 打印结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        company0_.id as id1_0_0_,</span><br><span class="line">        company0_.name as name2_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_company company0_ </span><br><span class="line">    where</span><br><span class="line">        company0_.id=?</span><br><span class="line">------------第一个分割线-------------</span><br><span class="line">------------第二个分割线-------------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        count(em_id) </span><br><span class="line">    from</span><br><span class="line">        tb_employee </span><br><span class="line">    where</span><br><span class="line">        com_id =?</span><br><span class="line">2</span><br><span class="line">------------第三个分割线-------------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        emps0_.com_id as com_id3_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_0_,</span><br><span class="line">        emps0_.em_id as em_id1_1_1_,</span><br><span class="line">        emps0_.name as name2_1_1_,</span><br><span class="line">        emps0_.com_id as com_id3_1_1_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee emps0_ </span><br><span class="line">    where</span><br><span class="line">        emps0_.com_id=?</span><br><span class="line">[Employee&#123;em_id=2, name=&apos;周小龙&apos;&#125;, Employee&#123;em_id=1, name=&apos;李晓飞&apos;&#125;]</span><br></pre></td></tr></table></figure><p>fetch为select , lazy为 extra，极其懒惰.与懒加载效果基本一致. 如果只获得集合的size.只查询集合的size(count语句)</p><hr><h2 id="五、fetch为join-lazy为-true-false-extra-测试"><a href="#五、fetch为join-lazy为-true-false-extra-测试" class="headerlink" title="五、fetch为join , lazy为 true | false | extra 测试"></a>五、fetch为join , lazy为 true | false | extra 测试</h2><h3 id="5-1-测试代码"><a href="#5-1-测试代码" class="headerlink" title="5.1 测试代码"></a>5.1 测试代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 关联级测试，集合关联</span><br><span class="line"> * fetch:join</span><br><span class="line"> * lazy:true|false|extra 失效，都是立即查询</span><br><span class="line"> * 这里测试的是，通过公司查询公司的员工</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test4()&#123;</span><br><span class="line">Session session = HibernateUtils.openSession();</span><br><span class="line">Transaction t = session.beginTransaction();</span><br><span class="line">//------------------------------</span><br><span class="line">//获取到公司</span><br><span class="line">Company c = session.get(Company.class,1L);</span><br><span class="line">System.out.println(&quot;------------第一个分割线-------------&quot;);</span><br><span class="line">//获取这个公司的员工（关联）</span><br><span class="line">Set&lt;Employee&gt; emps = c.getEmps();</span><br><span class="line">System.out.println(&quot;------------第二个分割线-------------&quot;);</span><br><span class="line">System.out.println(emps.size());</span><br><span class="line">System.out.println(&quot;------------第三个分割线-------------&quot;);</span><br><span class="line">System.out.println(emps);</span><br><span class="line"></span><br><span class="line">//------------------------------</span><br><span class="line">t.commit();</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-fetch为join-true-false-extra-打印结果"><a href="#5-2-fetch为join-true-false-extra-打印结果" class="headerlink" title="5.2 fetch为join , true | false | extra 打印结果"></a>5.2 fetch为join , true | false | extra 打印结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        company0_.id as id1_0_0_,</span><br><span class="line">        company0_.name as name2_0_0_,</span><br><span class="line">        emps1_.com_id as com_id3_1_1_,</span><br><span class="line">        emps1_.em_id as em_id1_1_1_,</span><br><span class="line">        emps1_.em_id as em_id1_1_2_,</span><br><span class="line">        emps1_.name as name2_1_2_,</span><br><span class="line">        emps1_.com_id as com_id3_1_2_ </span><br><span class="line">    from</span><br><span class="line">        tb_company company0_ </span><br><span class="line">    left outer join</span><br><span class="line">        tb_employee emps1_ </span><br><span class="line">            on company0_.id=emps1_.com_id </span><br><span class="line">    where</span><br><span class="line">        company0_.id=?</span><br><span class="line">------------第一个分割线-------------</span><br><span class="line">------------第二个分割线-------------</span><br><span class="line">2</span><br><span class="line">------------第三个分割线-------------</span><br><span class="line">[Employee&#123;em_id=1, name=&apos;李晓飞&apos;&#125;, Employee&#123;em_id=2, name=&apos;周小龙&apos;&#125;]</span><br></pre></td></tr></table></figure><p>fetch使用<strong>join</strong>的情况下，lazy失效，都是直接加载数据。</p><hr><hr><h2 id="六、fetch为join-lazy为-true-false-extra-测试"><a href="#六、fetch为join-lazy为-true-false-extra-测试" class="headerlink" title="六、fetch为join , lazy为 true | false | extra 测试"></a>六、fetch为join , lazy为 true | false | extra 测试</h2><h3 id="6-1-测试代码"><a href="#6-1-测试代码" class="headerlink" title="6.1 测试代码"></a>6.1 测试代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2-fetch为subselect-lazy为true-打印结果"><a href="#6-2-fetch为subselect-lazy为true-打印结果" class="headerlink" title="6.2 fetch为subselect , lazy为true  打印结果"></a>6.2 fetch为subselect , lazy为true  打印结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        company0_.id as id1_0_,</span><br><span class="line">        company0_.name as name2_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_company company0_</span><br><span class="line">------------第一个分割线-------------</span><br><span class="line">------------第二个分割线-------------</span><br><span class="line">Company&#123;id=1, name=&apos;百鸟公司&apos;&#125;</span><br><span class="line">------------第三个分割线-------------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        emps0_.com_id as com_id3_1_1_,</span><br><span class="line">        emps0_.em_id as em_id1_1_1_,</span><br><span class="line">        emps0_.em_id as em_id1_1_0_,</span><br><span class="line">        emps0_.name as name2_1_0_,</span><br><span class="line">        emps0_.com_id as com_id3_1_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee emps0_ </span><br><span class="line">    where</span><br><span class="line">        emps0_.com_id in (</span><br><span class="line">            select</span><br><span class="line">                company0_.id </span><br><span class="line">            from</span><br><span class="line">                tb_company company0_</span><br><span class="line">        )</span><br><span class="line">2</span><br><span class="line">------------第四个分割线-------------</span><br><span class="line">[Employee&#123;em_id=1, name=&apos;李晓飞&apos;&#125;, Employee&#123;em_id=2, name=&apos;周小龙&apos;&#125;]</span><br></pre></td></tr></table></figure><p>fetch为subselect , lazy为true ，首先会查询出公司的信息，不会查询员工信息。使用的员工集合的时候，会使用子查询查询出员工信息。</p><hr><h3 id="6-3-fetch为subselect-lazy为false-打印结果"><a href="#6-3-fetch为subselect-lazy为false-打印结果" class="headerlink" title="6.3 fetch为subselect , lazy为false  打印结果"></a>6.3 fetch为subselect , lazy为false  打印结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        company0_.id as id1_0_,</span><br><span class="line">        company0_.name as name2_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_company company0_</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        emps0_.com_id as com_id3_1_1_,</span><br><span class="line">        emps0_.em_id as em_id1_1_1_,</span><br><span class="line">        emps0_.em_id as em_id1_1_0_,</span><br><span class="line">        emps0_.name as name2_1_0_,</span><br><span class="line">        emps0_.com_id as com_id3_1_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee emps0_ </span><br><span class="line">    where</span><br><span class="line">        emps0_.com_id in (</span><br><span class="line">            select</span><br><span class="line">                company0_.id </span><br><span class="line">            from</span><br><span class="line">                tb_company company0_</span><br><span class="line">        )</span><br><span class="line">------------第一个分割线-------------</span><br><span class="line">------------第二个分割线-------------</span><br><span class="line">Company&#123;id=1, name=&apos;百鸟公司&apos;&#125;</span><br><span class="line">------------第三个分割线-------------</span><br><span class="line">2</span><br><span class="line">------------第四个分割线-------------</span><br><span class="line">[Employee&#123;em_id=1, name=&apos;李晓飞&apos;&#125;, Employee&#123;em_id=2, name=&apos;周小龙&apos;&#125;]</span><br></pre></td></tr></table></figure><p>fetch为subselect , lazy为false 。直接加载。首先使用查询出公司信息，然后通过子查询，查询出员工信息。</p><hr><h3 id="6-4-fetch为subselect-lazy为extra-打印结果"><a href="#6-4-fetch为subselect-lazy为extra-打印结果" class="headerlink" title="6.4 fetch为subselect , lazy为extra  打印结果"></a>6.4 fetch为subselect , lazy为extra  打印结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        company0_.id as id1_0_,</span><br><span class="line">        company0_.name as name2_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_company company0_</span><br><span class="line">------------第一个分割线-------------</span><br><span class="line">------------第二个分割线-------------</span><br><span class="line">Company&#123;id=1, name=&apos;百鸟公司&apos;&#125;</span><br><span class="line">------------第三个分割线-------------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        count(em_id) </span><br><span class="line">    from</span><br><span class="line">        tb_employee </span><br><span class="line">    where</span><br><span class="line">        com_id =?</span><br><span class="line">2</span><br><span class="line">------------第四个分割线-------------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        emps0_.com_id as com_id3_1_1_,</span><br><span class="line">        emps0_.em_id as em_id1_1_1_,</span><br><span class="line">        emps0_.em_id as em_id1_1_0_,</span><br><span class="line">        emps0_.name as name2_1_0_,</span><br><span class="line">        emps0_.com_id as com_id3_1_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_employee emps0_ </span><br><span class="line">    where</span><br><span class="line">        emps0_.com_id in (</span><br><span class="line">            select</span><br><span class="line">                company0_.id </span><br><span class="line">            from</span><br><span class="line">                tb_company company0_</span><br><span class="line">        )</span><br><span class="line">[Employee&#123;em_id=1, name=&apos;李晓飞&apos;&#125;, Employee&#123;em_id=2, name=&apos;周小龙&apos;&#125;]</span><br></pre></td></tr></table></figure><p>fetch为subselect , lazy为extra ，首先会查询出公司的信息，不会查询员工信息。使用的员工集合的时候，如果只是使用到size(),那么会使用<strong>count()</strong> 查询出个数。使用到员工集合的时候，会使用子查询查询出员工信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate23——关联级别加载策略之集合关联加载策略&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate23——关联级别加载策略之集合关联加载策略&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hi
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate22——类级别加载策略</title>
    <link href="http://qiwenming.github.io/hibernate/22/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/22/2017/11/19/</id>
    <published>2017-11-19T13:52:13.000Z</published>
    <updated>2018-01-18T13:51:53.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate22——类级别加载策略"><a href="#SSH与SSM学习之hibernate22——类级别加载策略" class="headerlink" title="SSH与SSM学习之hibernate22——类级别加载策略"></a>SSH与SSM学习之hibernate22——类级别加载策略</h1><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>我们这里说的类级别加载策略，其实就是懒加载(lazy)。主要我们就是来看看使用懒加载和不适用懒加载查询有什么区别。</p><h2 id="二、实体类与配置创建"><a href="#二、实体类与配置创建" class="headerlink" title="二、实体类与配置创建"></a>二、实体类与配置创建</h2><h3 id="2-1-说明"><a href="#2-1-说明" class="headerlink" title="2.1 说明"></a>2.1 说明</h3><p>我们这里使用的关系是公司和员工一对多的关系。公司使用Company,员工使用 <strong>Employee</strong>。</p><h3 id="2-2-Company-java-实体类"><a href="#2-2-Company-java-实体类" class="headerlink" title="2.2 Company.java 实体类"></a>2.2 Company.java 实体类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.qwm.hibernate03.domain;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author：qiwenming</span><br><span class="line"> * @date：2017/9/21 0021   0:12</span><br><span class="line"> * @description：</span><br><span class="line"> * 公司实体</span><br><span class="line"> */</span><br><span class="line">public class Company &#123;</span><br><span class="line">    private Long id;</span><br><span class="line">    private String name;</span><br><span class="line">    //一对多</span><br><span class="line">    private Set&lt;Employee&gt; emps = new HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public Long getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Long id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Set&lt;Employee&gt; getEmps() &#123;</span><br><span class="line">        return emps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmps(Set&lt;Employee&gt; emps) &#123;</span><br><span class="line">        this.emps = emps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Company&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-Company-hbm-xml"><a href="#2-3-Company-hbm-xml" class="headerlink" title="2.3 Company.hbm.xml"></a>2.3 Company.hbm.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate03.domain&quot; &gt;</span><br><span class="line">    &lt;class name=&quot;Company&quot; table=&quot;tb_company&quot; lazy=&quot;true&quot;&gt;</span><br><span class="line">        &lt;id name=&quot;id&quot;&gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 集合,一对多关系,在配置文件中配置 --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            name属性:集合属性名</span><br><span class="line">            column属性: 外键列名</span><br><span class="line">            class属性: 与我关联的对象完整类名</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;set name=&quot;emps&quot;&gt;</span><br><span class="line">            &lt;key column=&quot;com_id&quot;&gt;&lt;/key&gt;</span><br><span class="line">            &lt;one-to-many class=&quot;Employee&quot;&gt;&lt;/one-to-many&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-Employee-java-实体类"><a href="#2-4-Employee-java-实体类" class="headerlink" title="2.4 Employee.java 实体类"></a>2.4 Employee.java 实体类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.qwm.hibernate03.domain;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author：qiwenming</span><br><span class="line"> * @date：2017/9/21 0021   0:14</span><br><span class="line"> * @description：</span><br><span class="line"> * y员工</span><br><span class="line"> */</span><br><span class="line">public class Employee &#123;</span><br><span class="line">    private Long em_id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Company company;</span><br><span class="line"></span><br><span class="line">    public Long getEm_id() &#123;</span><br><span class="line">        return em_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEm_id(Long em_id) &#123;</span><br><span class="line">        this.em_id = em_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Company getCompany() &#123;</span><br><span class="line">        return company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCompany(Company company) &#123;</span><br><span class="line">        this.company = company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Employee&#123;&quot; +</span><br><span class="line">                &quot;em_id=&quot; + em_id +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-Employee-hbm-xml"><a href="#2-5-Employee-hbm-xml" class="headerlink" title="2.5 Employee.hbm.xml"></a>2.5 Employee.hbm.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate03.domain&quot; &gt;</span><br><span class="line">    &lt;class name=&quot;Employee&quot; table=&quot;tb_employee&quot; &gt;</span><br><span class="line">        &lt;id name=&quot;em_id&quot;  &gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot;  &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 多对一 --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            name属性:引用属性名</span><br><span class="line">            column属性: 外键列名</span><br><span class="line">            class属性: 与我关联的对象完整类名</span><br><span class="line">         --&gt;</span><br><span class="line">       &lt;many-to-one name=&quot;company&quot; column=&quot;com_id&quot; class=&quot;Company&quot;/&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="2-6-添加测试数据的代码"><a href="#2-6-添加测试数据的代码" class="headerlink" title="2.6 添加测试数据的代码"></a>2.6 添加测试数据的代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 用户添加测试数据而已</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line">    //-------------------------------------------</span><br><span class="line"></span><br><span class="line">    Company c1 = new Company();</span><br><span class="line">    c1.setName(&quot;百鸟公司&quot;);</span><br><span class="line"></span><br><span class="line">    Company c2 = new Company();</span><br><span class="line">    c2.setName(&quot;新合伙公司&quot;);</span><br><span class="line"></span><br><span class="line">    Employee e11 = new Employee();</span><br><span class="line">    e11.setName(&quot;李晓飞&quot;);</span><br><span class="line">    e11.setCompany(c1);</span><br><span class="line"></span><br><span class="line">    Employee e12 = new Employee();</span><br><span class="line">    e12.setName(&quot;周小龙&quot;);</span><br><span class="line">    e12.setCompany(c1);</span><br><span class="line"></span><br><span class="line">    Employee e21 = new Employee();</span><br><span class="line">    e21.setName(&quot;张大波&quot;);</span><br><span class="line">    e21.setCompany(c2);</span><br><span class="line"></span><br><span class="line">    Employee e22 = new Employee();</span><br><span class="line">    e22.setName(&quot;吴人用&quot;);</span><br><span class="line">    e22.setCompany(c2);</span><br><span class="line"></span><br><span class="line">    Employee e23 = new Employee();</span><br><span class="line">    e23.setName(&quot;晓峰&quot;);</span><br><span class="line">    e23.setCompany(c2);</span><br><span class="line"></span><br><span class="line">    //保存到数据库</span><br><span class="line">    session.save(c1);</span><br><span class="line">    session.save(c2);</span><br><span class="line">    session.save(e11);</span><br><span class="line">    session.save(e12);</span><br><span class="line">    session.save(e21);</span><br><span class="line">    session.save(e22);</span><br><span class="line">    session.save(e23);</span><br><span class="line"></span><br><span class="line">    //---------------------------------------------</span><br><span class="line">    t.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、get测试"><a href="#三、get测试" class="headerlink" title="三、get测试"></a>三、get测试</h2><h3 id="3-1-实例代码"><a href="#3-1-实例代码" class="headerlink" title="3.1 实例代码"></a>3.1 实例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* get方法 : 立即加载.执行方法时立即发送sql语句查询结果</span><br><span class="line">*/</span><br><span class="line">@Test</span><br><span class="line">public void test1()&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line">    //-------------------------------------------</span><br><span class="line">    Company c = session.get(Company.class,1L);</span><br><span class="line">    System.out.println(&quot;-------------我是分割线--------------&quot;);</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    //---------------------------------------------</span><br><span class="line">    t.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-结果"><a href="#3-2-结果" class="headerlink" title="3.2 结果"></a>3.2 结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        company0_.id as id1_0_0_,</span><br><span class="line">        company0_.name as name2_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_company company0_ </span><br><span class="line">    where</span><br><span class="line">        company0_.id=?</span><br><span class="line">-------------我是分割线--------------</span><br><span class="line">Company&#123;id=1, name=&apos;百鸟公司&apos;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-结论"><a href="#3-3-结论" class="headerlink" title="3.3 结论"></a>3.3 结论</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get方法 : 立即加载.执行方法时立即发送sql语句查询结果</span><br></pre></td></tr></table></figure><hr><h2 id="四、使用懒加载测试"><a href="#四、使用懒加载测试" class="headerlink" title="四、使用懒加载测试"></a>四、使用懒加载测试</h2><p>默认就是使用懒加载，或者修改我们 <strong>Company.hbm.xml</strong> ，添加我们懒加载属性（lazy）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line"></span><br><span class="line">&lt;class name=&quot;Company&quot; table=&quot;tb_company&quot; lazy=&quot;true&quot;&gt;</span><br><span class="line">    .......</span><br><span class="line">&lt;/class&gt;</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><h3 id="4-1-实例代码"><a href="#4-1-实例代码" class="headerlink" title="4.1 实例代码"></a>4.1 实例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  load方法(默认):是在执行时,不发送任何sql语句.返回一个对象.使用该对象时,才执行查询.</span><br><span class="line"> *  延迟加载: 仅仅获得没有使用.不会查询.在使用时才进行查询.</span><br><span class="line"> *  是否对类进行延迟加载: 可以通过在class元素上配置lazy属性来控制.</span><br><span class="line"> *  lazy:true  加载时,不查询.使用时才查询b</span><br><span class="line"> *  lazy:false 加载时立即查询.</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line">    //-------------------------------------------</span><br><span class="line">    Company c = session.load(Company.class,1L);</span><br><span class="line">    System.out.println(&quot;-------------我是分割线--------------&quot;);</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    //---------------------------------------------</span><br><span class="line">    t.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-结果"><a href="#4-2-结果" class="headerlink" title="4.2 结果"></a>4.2 结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-------------我是分割线--------------</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        company0_.id as id1_0_0_,</span><br><span class="line">        company0_.name as name2_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_company company0_ </span><br><span class="line">    where</span><br><span class="line">        company0_.id=?</span><br><span class="line">Company&#123;id=1, name=&apos;百鸟公司&apos;&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-结论"><a href="#4-3-结论" class="headerlink" title="4.3 结论"></a>4.3 结论</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">load方法(默认):是在执行时,不发送任何sql语句.返回一个对象.使用该对象时,才执行查询.</span><br><span class="line">返回的其实是一个代理对象</span><br></pre></td></tr></table></figure><hr><h2 id="五、不使用懒加载测试"><a href="#五、不使用懒加载测试" class="headerlink" title="五、不使用懒加载测试"></a>五、不使用懒加载测试</h2><p>测试代码和 <strong>四</strong> 是一样的</p><h3 id="5-1-修改配置文件"><a href="#5-1-修改配置文件" class="headerlink" title="5.1 修改配置文件"></a>5.1 修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line"></span><br><span class="line">&lt;class name=&quot;Company&quot; table=&quot;tb_company&quot; lazy=&quot;false&quot;&gt;</span><br><span class="line">    .......</span><br><span class="line">&lt;/class&gt;</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><h3 id="5-2-结果"><a href="#5-2-结果" class="headerlink" title="5.2 结果"></a>5.2 结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        company0_.id as id1_0_0_,</span><br><span class="line">        company0_.name as name2_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_company company0_ </span><br><span class="line">    where</span><br><span class="line">        company0_.id=?</span><br><span class="line">-------------我是分割线--------------</span><br><span class="line">Company&#123;id=1, name=&apos;百鸟公司&apos;&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-结论"><a href="#5-3-结论" class="headerlink" title="5.3 结论"></a>5.3 结论</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lazy:false 加载时立即查询.</span><br><span class="line">和get方法是一样的</span><br><span class="line">返回的是一个我们查询的对象，不是代理对象</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate22——类级别加载策略&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate22——类级别加载策略&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate22——类级别加载策略&quot;&gt;
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate21——离线查询</title>
    <link href="http://qiwenming.github.io/hibernate/21/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/21/2017/11/19/</id>
    <published>2017-11-19T13:52:12.000Z</published>
    <updated>2018-01-18T13:51:53.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate21——离线查询"><a href="#SSH与SSM学习之hibernate21——离线查询" class="headerlink" title="SSH与SSM学习之hibernate21——离线查询"></a>SSH与SSM学习之hibernate21——离线查询</h1><h2 id="一、离线查询说明"><a href="#一、离线查询说明" class="headerlink" title="一、离线查询说明"></a>一、离线查询说明</h2><p>我们在使用查询的时候，都是Service通过传递参数调用Dao相应的查询方法。这样有个问题就是我们的查询方法都是固定的。比如我们通过id查询用户，那么就只能通过id查询用户，不能再通过其他方式查询。这样这个方法写的方法就比较多啦。那么我们想要是实现的就是，Dao 内部只做有一个简单的查询，Service等来指定查询的方法等这样的方式怎么做呢？<br>这就是我们要使用的离线查询了（DetachedCriteria）。</p><hr><h2 id="二、非离线查询和离线查询示意图"><a href="#二、非离线查询和离线查询示意图" class="headerlink" title="二、非离线查询和离线查询示意图"></a>二、非离线查询和离线查询示意图</h2><p><strong>非离线查询</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\Administrator\Desktop\66.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>离线查询</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\Administrator\Desktop\67.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><hr><h2 id="三、代码实例"><a href="#三、代码实例" class="headerlink" title="三、代码实例"></a>三、代码实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.qwm.hibernate03.c_dc;</span><br><span class="line"></span><br><span class="line">import com.qwm.hibernate03.domain.Customer;</span><br><span class="line">import com.qwm.hibernate03.utils.HibernateUtils;</span><br><span class="line">import org.hibernate.Criteria;</span><br><span class="line">import org.hibernate.Session;</span><br><span class="line">import org.hibernate.Transaction;</span><br><span class="line">import org.hibernate.criterion.DetachedCriteria;</span><br><span class="line">import org.hibernate.criterion.Restrictions;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author：qiwenming</span><br><span class="line"> * @date：2017/9/20 0020   23:28</span><br><span class="line"> * @description：</span><br><span class="line"> * 离线查询实例</span><br><span class="line"> */</span><br><span class="line">public class Demo &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test1()&#123;</span><br><span class="line">        //代表service/web层过来的</span><br><span class="line">        DetachedCriteria dc = DetachedCriteria.forClass(Customer.class);</span><br><span class="line">        dc.add(Restrictions.eq(&quot;id&quot;,1L));</span><br><span class="line"></span><br><span class="line">        //查询</span><br><span class="line">        query(dc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询方法</span><br><span class="line">     * @param dc</span><br><span class="line">     */</span><br><span class="line">    public void query(DetachedCriteria dc)&#123;</span><br><span class="line">        Session session = HibernateUtils.openSession();</span><br><span class="line">        Transaction t = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        Criteria c = dc.getExecutableCriteria(session);</span><br><span class="line"></span><br><span class="line">        List list = c.list();</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        t.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、结果"><a href="#四、结果" class="headerlink" title="四、结果"></a>四、结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    alter table cst_linkman </span><br><span class="line">       add constraint FKh9yp1nql5227xxcopuxqx2e7q </span><br><span class="line">       foreign key (lkm_cust_id) </span><br><span class="line">       references cst_customer (cust_id)</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    alter table sys_user_role </span><br><span class="line">       add constraint FKhh52n8vd4ny9ff4x9fb8v65qx </span><br><span class="line">       foreign key (role_id) </span><br><span class="line">       references sys_role (role_id)</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    alter table sys_user_role </span><br><span class="line">       add constraint FKb40xxfch70f5qnyfw8yme1n1s </span><br><span class="line">       foreign key (user_id) </span><br><span class="line">       references sys_user (user_id)</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        this_.cust_id as cust_id1_0_0_,</span><br><span class="line">        this_.cust_name as cust_nam2_0_0_,</span><br><span class="line">        this_.cust_source as cust_sou3_0_0_,</span><br><span class="line">        this_.cust_industry as cust_ind4_0_0_,</span><br><span class="line">        this_.cust_level as cust_lev5_0_0_,</span><br><span class="line">        this_.cust_linkman as cust_lin6_0_0_,</span><br><span class="line">        this_.cust_phone as cust_pho7_0_0_,</span><br><span class="line">        this_.cust_mobile as cust_mob8_0_0_ </span><br><span class="line">    from</span><br><span class="line">        cst_customer this_ </span><br><span class="line">    where</span><br><span class="line">        this_.cust_id=?</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        linkmens0_.lkm_cust_id as lkm_cus10_1_0_,</span><br><span class="line">        linkmens0_.lkm_id as lkm_id1_1_0_,</span><br><span class="line">        linkmens0_.lkm_id as lkm_id1_1_1_,</span><br><span class="line">        linkmens0_.lkm_gender as lkm_gend2_1_1_,</span><br><span class="line">        linkmens0_.lkm_name as lkm_name3_1_1_,</span><br><span class="line">        linkmens0_.lkm_phone as lkm_phon4_1_1_,</span><br><span class="line">        linkmens0_.lkm_email as lkm_emai5_1_1_,</span><br><span class="line">        linkmens0_.lkm_qq as lkm_qq6_1_1_,</span><br><span class="line">        linkmens0_.lkm_mobile as lkm_mobi7_1_1_,</span><br><span class="line">        linkmens0_.lkm_memo as lkm_memo8_1_1_,</span><br><span class="line">        linkmens0_.lkm_position as lkm_posi9_1_1_,</span><br><span class="line">        linkmens0_.lkm_cust_id as lkm_cus10_1_1_ </span><br><span class="line">    from</span><br><span class="line">        cst_linkman linkmens0_ </span><br><span class="line">    where</span><br><span class="line">        linkmens0_.lkm_cust_id=?</span><br><span class="line">[Customer&#123;cust_id=1, cust_name=&apos;吊毛公司&apos;, cust_source=&apos;null&apos;, cust_industry=&apos;null&apos;, cust_level=&apos;null&apos;, cust_linkman=&apos;null&apos;, cust_phone=&apos;null&apos;, cust_mobile=&apos;null&apos;, linkMens=[com.qwm.hibernate03.domain.LinkMan@6034e75d, com.qwm.hibernate03.domain.LinkMan@5e63cad]&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate21——离线查询&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate21——离线查询&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate21——离线查询&quot;&gt;&lt;/a&gt;SSH与S
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate20——多对多操作</title>
    <link href="http://qiwenming.github.io/hibernate/20/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/20/2017/11/19/</id>
    <published>2017-11-19T13:52:11.000Z</published>
    <updated>2018-01-18T13:51:53.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate20——多对多操作"><a href="#SSH与SSM学习之hibernate20——多对多操作" class="headerlink" title="SSH与SSM学习之hibernate20——多对多操作"></a>SSH与SSM学习之hibernate20——多对多操作</h1><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>关于多对多的关系可以查看 <a href="http://blog.csdn.net/qiwenmingshiwo/article/details/78025056" target="_blank" rel="noopener">SSH与SSM学习之hibernate16——表与表的三种关系</a>。</p><p>这里我们涉及到的是 用户（员工）与角色之间的多对多的关系。</p><hr><h2 id="二、-用户（员工）实体"><a href="#二、-用户（员工）实体" class="headerlink" title="二、 用户（员工）实体"></a>二、 用户（员工）实体</h2><h3 id="2-1-User-java"><a href="#2-1-User-java" class="headerlink" title="2.1 User.java"></a>2.1 User.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * @author：qiwenming</span><br><span class="line"> * @date：2017/9/19 0019   20:57</span><br><span class="line"> * @description：</span><br><span class="line"> * 用户类</span><br><span class="line"> */</span><br><span class="line">public class User &#123;</span><br><span class="line">    private Long user_id;</span><br><span class="line">    private String user_code;</span><br><span class="line">    private String user_name;</span><br><span class="line">    private String user_password;</span><br><span class="line">    private Character user_state;</span><br><span class="line">    </span><br><span class="line">    //表达多对多关系</span><br><span class="line">    private Set&lt;Role&gt; roles = new HashSet&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    ....省略了get/set方法...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-User-hbm-xml"><a href="#2-2-User-hbm-xml" class="headerlink" title="2.2 User.hbm.xml"></a>2.2 User.hbm.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate03.domain&quot; &gt;</span><br><span class="line">    &lt;class name=&quot;User&quot; table=&quot;sys_user&quot; &gt;</span><br><span class="line">        &lt;id name=&quot;user_id&quot;  &gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;user_code&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;user_name&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;user_password&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;user_state&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 多对多关系表达 --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            name: 集合属性名</span><br><span class="line">            table: 配置中间表名</span><br><span class="line">            key</span><br><span class="line">             |-column:外键,别人引用&quot;我&quot;的外键列名</span><br><span class="line">             class: 我与哪个类是多对多关系</span><br><span class="line">             column:外键.我引用比人的外键列名</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;set name=&quot;roles&quot; table=&quot;sys_user_role&quot;&gt;</span><br><span class="line">            &lt;!----&gt;</span><br><span class="line">            &lt;key column=&quot;user_id&quot;&gt;&lt;/key&gt;</span><br><span class="line">            &lt;many-to-many class=&quot;Role&quot; column=&quot;role_id&quot;&gt;&lt;/many-to-many&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="三、角色实体"><a href="#三、角色实体" class="headerlink" title="三、角色实体"></a>三、角色实体</h2><h3 id="3-1-Role-java"><a href="#3-1-Role-java" class="headerlink" title="3.1 Role.java"></a>3.1 Role.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Role &#123;</span><br><span class="line">    private Long role_id;</span><br><span class="line">    private String role_name;</span><br><span class="line">    private String role_memo;</span><br><span class="line">    </span><br><span class="line">    //表达多对对关系</span><br><span class="line">    private Set&lt;User&gt; users = new HashSet&lt;&gt;();    </span><br><span class="line">    </span><br><span class="line">    ....省略了get/set方法...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-Role-hbm-xml"><a href="#3-2-Role-hbm-xml" class="headerlink" title="3.2 Role.hbm.xml"></a>3.2 Role.hbm.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate03.domain&quot; &gt;</span><br><span class="line">    &lt;class name=&quot;Role&quot; table=&quot;sys_role&quot; &gt;</span><br><span class="line">        &lt;id name=&quot;role_id&quot;  &gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;role_name&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;role_memo&quot;  &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 多对多关系表达 --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            name: 集合属性名</span><br><span class="line">            table: 配置中间表名</span><br><span class="line">            key</span><br><span class="line">             |-column:外键,别人引用&quot;我&quot;的外键列名</span><br><span class="line">             class: 我与哪个类是多对多关系</span><br><span class="line">             column:外键.我引用比人的外键列名</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;set name=&quot;users&quot; table=&quot;sys_user_role&quot; inverse=&quot;true&quot;&gt;</span><br><span class="line">            &lt;key column=&quot;role_id&quot;&gt;&lt;/key&gt;</span><br><span class="line">            &lt;many-to-many class=&quot;User&quot; column=&quot;user_id&quot;&gt;&lt;/many-to-many&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="四、保存用户以及角色"><a href="#四、保存用户以及角色" class="headerlink" title="四、保存用户以及角色"></a>四、保存用户以及角色</h2><h3 id="4-1-产生的问题以及解决"><a href="#4-1-产生的问题以及解决" class="headerlink" title="4.1 产生的问题以及解决"></a>4.1 产生的问题以及解决</h3><p><strong>注意：</strong> 这里我们保存用户与角色的数据的时候，需要注意，二者默认都是维护着关系的，就会导致二者都会相互之间添加到维护他们两者之间关系的表中，这样就会产生主键冲突，导致无法数据添加失败。</p><p><strong>解决方式有两种：</strong></p><p><strong>第一种</strong> 我们在添加数据关系的时候，只添加一方的关系，不添添加另一方的关系</p><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    //3.3表达关系</span><br><span class="line">    user1.getRoles().add(role1);</span><br><span class="line">    user1.getRoles().add(role2);</span><br><span class="line">    user2.getRoles().add(role1);</span><br><span class="line">    user2.getRoles().add(role2);</span><br><span class="line"></span><br><span class="line">//  role1.getUsers().add(user1);</span><br><span class="line">//  role1.getUsers().add(user2);</span><br><span class="line">//  role2.getUsers().add(user1);</span><br><span class="line">//  role2.getUsers().add(user2);</span><br></pre></td></tr></table></figure></p><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">        //3.3表达关系</span><br><span class="line">//  user1.getRoles().add(role1);</span><br><span class="line">//  user1.getRoles().add(role2);</span><br><span class="line">//  user2.getRoles().add(role1);</span><br><span class="line">//  user2.getRoles().add(role2);</span><br><span class="line"></span><br><span class="line">    role1.getUsers().add(user1);</span><br><span class="line">    role1.getUsers().add(user2);</span><br><span class="line">    role2.getUsers().add(user1);</span><br><span class="line">    role2.getUsers().add(user2);</span><br></pre></td></tr></table></figure><p><strong>第二种</strong> 这种方式就是配置一方放弃维护关系，可以配置到 User 中，也可以配置到 Role中，</p><p>如</p><p>如果是 <strong>Role.hbm.xml</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">&lt;set name=&quot;users&quot; table=&quot;sys_user_role&quot; inverse=&quot;true&quot;&gt;</span><br><span class="line">    &lt;key column=&quot;role_id&quot;&gt;&lt;/key&gt;</span><br><span class="line">    &lt;many-to-many class=&quot;User&quot; column=&quot;user_id&quot;&gt;&lt;/many-to-many&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>或者</p><p>如果是 <strong>User.hbm.xml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">&lt;set name=&quot;roles&quot; table=&quot;sys_user_role&quot; inverse=&quot;true&quot;&gt;</span><br><span class="line">    &lt;!----&gt;</span><br><span class="line">    &lt;key column=&quot;user_id&quot;&gt;&lt;/key&gt;</span><br><span class="line">    &lt;many-to-many class=&quot;Role&quot; column=&quot;role_id&quot;&gt;&lt;/many-to-many&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><hr><p><strong>下面的例子中，我们采用的是配置文件中 Role放弃维护关系，就是上面我们的完整配置</strong></p><h3 id="4-2-代码实例"><a href="#4-2-代码实例" class="headerlink" title="4.2 代码实例"></a>4.2 代码实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 保存用户以及角色</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test1()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    //2.开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line">    //===================================</span><br><span class="line">    //3.操作</span><br><span class="line">    //3.1创建两个用户</span><br><span class="line">    User user1 = new User();</span><br><span class="line">    user1.setUser_name(&quot;高晓明&quot;);</span><br><span class="line">    User user2 = new User();</span><br><span class="line">    user2.setUser_name(&quot;李志锋&quot;)</span><br><span class="line">    ;</span><br><span class="line">    //3.2创建两角色</span><br><span class="line">    Role role1 = new Role();</span><br><span class="line">    role1.setRole_name(&quot;保安&quot;);</span><br><span class="line">    Role role2 = new Role();</span><br><span class="line">    role2.setRole_name(&quot;清洁工&quot;);</span><br><span class="line"></span><br><span class="line">    //3.3表达关系</span><br><span class="line">    user1.getRoles().add(role1);</span><br><span class="line">    user1.getRoles().add(role2);</span><br><span class="line">    user2.getRoles().add(role1);</span><br><span class="line">    user2.getRoles().add(role2);</span><br><span class="line"></span><br><span class="line">    role1.getUsers().add(user1);</span><br><span class="line">    role1.getUsers().add(user2);</span><br><span class="line">    role2.getUsers().add(user1);</span><br><span class="line">    role2.getUsers().add(user2);</span><br><span class="line"></span><br><span class="line">    //3.4数据持久化</span><br><span class="line">    session.save(user1);</span><br><span class="line">    session.save(user2);</span><br><span class="line">    session.save(role1);</span><br><span class="line">    session.save(role2);</span><br><span class="line"></span><br><span class="line">    //===================================</span><br><span class="line"></span><br><span class="line">    //4.提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-结果"><a href="#4-3-结果" class="headerlink" title="4.3 结果"></a>4.3 结果</h3><p><strong>用户表</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170919234526579?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><p><strong>角色表</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170919234536794?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><p><strong>用户-角色表</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170919234548563?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><hr><h2 id="五、为用户添加角色"><a href="#五、为用户添加角色" class="headerlink" title="五、为用户添加角色"></a>五、为用户添加角色</h2><h3 id="5-1-问题说明"><a href="#5-1-问题说明" class="headerlink" title="5.1 问题说明"></a>5.1 问题说明</h3><p>我们为用户保存角色的时候，有两种方式处理</p><p><strong>第一种：我们自己保存角色</strong></p><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.getRoles().add(role);</span><br><span class="line">session.save(role);</span><br></pre></td></tr></table></figure><p><strong>第二种：再我们的user.hbm.xml中配置级联保存</strong></p><p>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;set name=&quot;roles&quot; table=&quot;sys_user_role&quot; cascade=&quot;save-update&quot;&gt;</span><br><span class="line">&lt;!----&gt;</span><br><span class="line">&lt;key column=&quot;user_id&quot;&gt;&lt;/key&gt;</span><br><span class="line">&lt;many-to-many class=&quot;Role&quot; column=&quot;role_id&quot;&gt;&lt;/many-to-many&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure></p><p>这里我们使用的是第一种方式</p><h3 id="5-2-示例代码"><a href="#5-2-示例代码" class="headerlink" title="5.2 示例代码"></a>5.2 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 为用户添加角色</span><br><span class="line"> * 我们来实现为 “高晓峰”添加一个“部门经理”的角色</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">//1.创建session</span><br><span class="line">Session session = HibernateUtils.openSession();</span><br><span class="line">//2.开启事务</span><br><span class="line">Transaction t = session.beginTransaction();</span><br><span class="line">//===================================</span><br><span class="line">//3.操作</span><br><span class="line">//3.1 得到高晓峰这个用户</span><br><span class="line">User user = session.get(User.class,1L);</span><br><span class="line">//3.2 创建“部门经理”这个角色</span><br><span class="line">Role role = new Role();</span><br><span class="line">role.setRole_name(&quot;部门经理&quot;);</span><br><span class="line">//3.3 给高晓峰添加“部门经理”这个角色</span><br><span class="line">//这里不用调用保存的方法，保存user,因为user是持久化对象</span><br><span class="line">user.getRoles().add(role);</span><br><span class="line">//        session.save(role);</span><br><span class="line"></span><br><span class="line">//===================================</span><br><span class="line"></span><br><span class="line">//4.提交事务</span><br><span class="line">t.commit();</span><br><span class="line">//5.关闭资源</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-结果"><a href="#5-3-结果" class="headerlink" title="5.3 结果"></a>5.3 结果</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170919234622747?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><hr><h2 id="六、为用户删除角色"><a href="#六、为用户删除角色" class="headerlink" title="六、为用户删除角色"></a>六、为用户删除角色</h2><h3 id="6-1-示例代码"><a href="#6-1-示例代码" class="headerlink" title="6.1 示例代码"></a>6.1 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 为用户删除角色</span><br><span class="line"> * 我们来实现为 “高晓峰”删除“清洁工”和“保安”的角色</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test3()&#123;</span><br><span class="line">//1.创建session</span><br><span class="line">Session session = HibernateUtils.openSession();</span><br><span class="line">//2.开启事务</span><br><span class="line">Transaction t = session.beginTransaction();</span><br><span class="line">//===================================</span><br><span class="line">//3.操作</span><br><span class="line">//3.1获取到用户</span><br><span class="line">//3.2获取到“清洁工”这个角色</span><br><span class="line">//3.3获取到“保安”这个角色</span><br><span class="line">//3.4从用户的角色集合中删除“保安”和“清洁工”</span><br><span class="line">User user = session.get(User.class,1L);</span><br><span class="line">Role role1 = session.get(Role.class,1L);</span><br><span class="line">Role role2 = session.get(Role.class,2L);</span><br><span class="line">//user是持久化对象那个，所以不用调用保存的方法</span><br><span class="line">user.getRoles().remove(role1);</span><br><span class="line">user.getRoles().remove(role2);</span><br><span class="line">//===================================</span><br><span class="line"></span><br><span class="line">//4.提交事务</span><br><span class="line">t.commit();</span><br><span class="line">//5.关闭资源</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-结果"><a href="#6-2-结果" class="headerlink" title="6.2 结果"></a>6.2 结果</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170919234717540?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate20——多对多操作&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate20——多对多操作&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate20——多对多操作&quot;&gt;&lt;/a&gt;SS
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate19——多对一一对多关系维护</title>
    <link href="http://qiwenming.github.io/hibernate/19/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/19/2017/11/19/</id>
    <published>2017-11-19T13:52:10.000Z</published>
    <updated>2018-01-18T13:51:53.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate19——多对一一对多关系维护"><a href="#SSH与SSM学习之hibernate19——多对一一对多关系维护" class="headerlink" title="SSH与SSM学习之hibernate19——多对一一对多关系维护"></a>SSH与SSM学习之hibernate19——多对一一对多关系维护</h1><h2 id="一、SQL语句多余了？"><a href="#一、SQL语句多余了？" class="headerlink" title="一、SQL语句多余了？"></a>一、SQL语句多余了？</h2><p>使用我们之前的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 保存客户 以及客户 下的联系人</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test1()&#123;</span><br><span class="line">    //1.获取session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    //2.开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line">    //3.操作</span><br><span class="line"></span><br><span class="line">    Customer c = new Customer();</span><br><span class="line">    c.setCust_name(&quot;吊毛公司&quot;);</span><br><span class="line"></span><br><span class="line">    LinkMan lm1 = new LinkMan();</span><br><span class="line">    lm1.setLkm_name(&quot;李吊毛&quot;);</span><br><span class="line"></span><br><span class="line">    LinkMan lm2 = new LinkMan();</span><br><span class="line">    lm2.setLkm_name(&quot;高小飞&quot;);</span><br><span class="line"></span><br><span class="line">    //表达一对多,客户下有多个联系人</span><br><span class="line">    c.getLinkMens().add(lm1);</span><br><span class="line">    c.getLinkMens().add(lm2);</span><br><span class="line"></span><br><span class="line">    //表达多对一,联系人属于哪个客户</span><br><span class="line">    lm1.setCustomer(c);</span><br><span class="line">    lm2.setCustomer(c);</span><br><span class="line"></span><br><span class="line">    session.save(c);</span><br><span class="line">    session.save(lm1);</span><br><span class="line">    session.save(lm2);</span><br><span class="line"></span><br><span class="line">    //4.提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加数据的时候，我们发现，我们直插入三条数据，但是却有5个sql语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    insert </span><br><span class="line">    into</span><br><span class="line">        cst_customer</span><br><span class="line">        (cust_name, cust_source, cust_industry, cust_level, cust_linkman, cust_phone, cust_mobile) </span><br><span class="line">    values</span><br><span class="line">        (?, ?, ?, ?, ?, ?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    insert </span><br><span class="line">    into</span><br><span class="line">        cst_linkman</span><br><span class="line">        (lkm_gender, lkm_name, lkm_phone, lkm_email, lkm_qq, lkm_mobile, lkm_memo, lkm_position, lkm_cust_id) </span><br><span class="line">    values</span><br><span class="line">        (?, ?, ?, ?, ?, ?, ?, ?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    insert </span><br><span class="line">    into</span><br><span class="line">        cst_linkman</span><br><span class="line">        (lkm_gender, lkm_name, lkm_phone, lkm_email, lkm_qq, lkm_mobile, lkm_memo, lkm_position, lkm_cust_id) </span><br><span class="line">    values</span><br><span class="line">        (?, ?, ?, ?, ?, ?, ?, ?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    update</span><br><span class="line">        cst_linkman </span><br><span class="line">    set</span><br><span class="line">        lkm_cust_id=? </span><br><span class="line">    where</span><br><span class="line">        lkm_id=?</span><br><span class="line">Hibernate: </span><br><span class="line">    update</span><br><span class="line">        cst_linkman </span><br><span class="line">    set</span><br><span class="line">        lkm_cust_id=? </span><br><span class="line">    where</span><br><span class="line">        lkm_id=?</span><br></pre></td></tr></table></figure><p>前面的3个SQL是插入数据的，这个无可厚非。那么后面的两个SQL呢？它又是用来干嘛的呢？其实这个我看到是用来更新 <strong>联系人表</strong> 的外键的，这个外键在插入联系人的时候已经维护过了。所以不可能是联系人表搞得鬼，只可能是 <strong>客户表</strong> 搞得鬼了。</p><hr><h2 id="二、inverse-配置关系是否维护"><a href="#二、inverse-配置关系是否维护" class="headerlink" title="二、inverse 配置关系是否维护"></a>二、inverse 配置关系是否维护</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- inverse属性: 配置关系是否维护. </span><br><span class="line">  true: customer不维护关系</span><br><span class="line">  false(默认值): customer维护关系</span><br><span class="line">  </span><br><span class="line">  inverse属性: 性能优化.提高关系维护的性能.</span><br><span class="line">  原则: 无论怎么放弃,总有一方必须要维护关系.</span><br><span class="line">  一对多关系中: 一的一方放弃.也只能一的一方放弃.多的一方不能放弃.</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h2 id="三、配置客户表"><a href="#三、配置客户表" class="headerlink" title="三、配置客户表"></a>三、配置客户表</h2><p>在客户表中 我们配置不维护 关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate03.domain&quot; &gt;</span><br><span class="line">    &lt;class name=&quot;Customer&quot; table=&quot;cst_customer&quot; &gt;</span><br><span class="line">        &lt;id name=&quot;cust_id&quot;  &gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;cust_name&quot; column=&quot;cust_name&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_source&quot; column=&quot;cust_source&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_industry&quot; column=&quot;cust_industry&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_level&quot; column=&quot;cust_level&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_linkman&quot; column=&quot;cust_linkman&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_phone&quot; column=&quot;cust_phone&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_mobile&quot; column=&quot;cust_mobile&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- inverse属性: 配置关系是否维护.</span><br><span class="line">                true: customer不维护关系</span><br><span class="line">                false(默认值): customer维护关系</span><br><span class="line"></span><br><span class="line">            inverse属性: 性能优化.提高关系维护的性能.</span><br><span class="line">            原则: 无论怎么放弃,总有一方必须要维护关系.</span><br><span class="line">            一对多关系中: 一的一方放弃.也只能一的一方放弃.多的一方不能放弃.</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;set name=&quot;linkMens&quot; inverse=&quot;true&quot;&gt;</span><br><span class="line">            &lt;key column=&quot;lkm_cust_id&quot;&gt;&lt;/key&gt;</span><br><span class="line">            &lt;one-to-many class=&quot;LinkMan&quot;&gt;&lt;/one-to-many&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><p>再次运行上面的代码，得到如下结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    insert </span><br><span class="line">    into</span><br><span class="line">        cst_customer</span><br><span class="line">        (cust_name, cust_source, cust_industry, cust_level, cust_linkman, cust_phone, cust_mobile) </span><br><span class="line">    values</span><br><span class="line">        (?, ?, ?, ?, ?, ?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    insert </span><br><span class="line">    into</span><br><span class="line">        cst_linkman</span><br><span class="line">        (lkm_gender, lkm_name, lkm_phone, lkm_email, lkm_qq, lkm_mobile, lkm_memo, lkm_position, lkm_cust_id) </span><br><span class="line">    values</span><br><span class="line">        (?, ?, ?, ?, ?, ?, ?, ?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    insert </span><br><span class="line">    into</span><br><span class="line">        cst_linkman</span><br><span class="line">        (lkm_gender, lkm_name, lkm_phone, lkm_email, lkm_qq, lkm_mobile, lkm_memo, lkm_position, lkm_cust_id) </span><br><span class="line">    values</span><br><span class="line">        (?, ?, ?, ?, ?, ?, ?, ?, ?)</span><br></pre></td></tr></table></figure><hr><h2 id="四、测试的方法可以出去不必要的代码"><a href="#四、测试的方法可以出去不必要的代码" class="headerlink" title="四、测试的方法可以出去不必要的代码"></a>四、测试的方法可以出去不必要的代码</h2><p>如果客户放弃维护与联系人的关系. 维护关系的代码可以省略</p><p>所以上面的测试代码可以去除客户维护联系人的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 保存客户 以及客户 下的联系人</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test1()&#123;</span><br><span class="line">    //1.获取session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    //2.开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line">    //3.操作</span><br><span class="line"></span><br><span class="line">    Customer c = new Customer();</span><br><span class="line">    c.setCust_name(&quot;吊毛公司&quot;);</span><br><span class="line"></span><br><span class="line">    LinkMan lm1 = new LinkMan();</span><br><span class="line">    lm1.setLkm_name(&quot;李吊毛&quot;);</span><br><span class="line"></span><br><span class="line">    LinkMan lm2 = new LinkMan();</span><br><span class="line">    lm2.setLkm_name(&quot;高小飞&quot;);</span><br><span class="line"></span><br><span class="line">    //表达一对多,客户下有多个联系人</span><br><span class="line">    //表达一对多,客户下有多个联系人.</span><br><span class="line">    // 如果客户放弃维护与联系人的关系. 维护关系的代码可以省略</span><br><span class="line">//        c.getLinkMens().add(lm1);</span><br><span class="line">//        c.getLinkMens().add(lm2);</span><br><span class="line"></span><br><span class="line">    //表达多对一,联系人属于哪个客户</span><br><span class="line">    lm1.setCustomer(c);</span><br><span class="line">    lm2.setCustomer(c);</span><br><span class="line"></span><br><span class="line">    session.save(c);</span><br><span class="line">    session.save(lm1);</span><br><span class="line">    session.save(lm2);</span><br><span class="line"></span><br><span class="line">    //4.提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、删除"><a href="#五、删除" class="headerlink" title="五、删除"></a>五、删除</h2><p>删除的时候需要注意，由于我们的客户表和联系人表是关联的。所以我们有两种方式删除。</p><ol><li>把联系人中的客户设置为空，然后可以删除客户表中对应的客户了（可以使用我们的级联）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;set name=&quot;linkMens&quot; inverse=&quot;true&quot; cascade=&quot;delete&quot;  &gt;</span><br><span class="line">&lt;key column=&quot;lkm_cust_id&quot; &gt;&lt;/key&gt;</span><br><span class="line">&lt;one-to-many class=&quot;LinkMan&quot; /&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure><ol><li>让客户表维护与联系人之间的关系，这样删除的时候就把对应的联系的外设置为空了。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;set name=&quot;linkMens&quot; inverse=&quot;false&quot;  &gt;</span><br><span class="line">&lt;key column=&quot;lkm_cust_id&quot; &gt;&lt;/key&gt;</span><br><span class="line">&lt;one-to-many class=&quot;LinkMan&quot; /&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate19——多对一一对多关系维护&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate19——多对一一对多关系维护&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate19——多对一
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate18——多对一一对多级联操作</title>
    <link href="http://qiwenming.github.io/hibernate/18/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/18/2017/11/19/</id>
    <published>2017-11-19T13:52:09.000Z</published>
    <updated>2018-01-18T13:51:53.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate18——多对一一对多级联操作"><a href="#SSH与SSM学习之hibernate18——多对一一对多级联操作" class="headerlink" title="SSH与SSM学习之hibernate18——多对一一对多级联操作"></a>SSH与SSM学习之hibernate18——多对一一对多级联操作</h1><h2 id="一、有简便的操作吗？"><a href="#一、有简便的操作吗？" class="headerlink" title="一、有简便的操作吗？"></a>一、有简便的操作吗？</h2><p>前面我们创建一个客户，两个联系人，我们保存的时候，需要三个保存</p><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">session.save(c);</span><br><span class="line">session.save(lm1);</span><br><span class="line">session.save(lm2);</span><br></pre></td></tr></table></figure><p>那么有没有我们只要保存 客户，就可实现上面三个数据都保存了呢？也就是使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.save(c);</span><br></pre></td></tr></table></figure><p>就是实现了上面的三行代码的功能？当然是能的，我们需要使用 级联来操作</p><hr><h2 id="二、级联说明"><a href="#二、级联说明" class="headerlink" title="二、级联说明"></a>二、级联说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> 级联操作:cascade</span><br><span class="line"> </span><br><span class="line">    save-update: 级联保存更新</span><br><span class="line">    </span><br><span class="line">    delete:级联删除</span><br><span class="line">    </span><br><span class="line">    all:save-update+delete</span><br><span class="line">    </span><br><span class="line">级联操作: 简化操作.</span><br></pre></td></tr></table></figure><hr><h2 id="三、保存客户-以及客户-下的联系人"><a href="#三、保存客户-以及客户-下的联系人" class="headerlink" title="三、保存客户 以及客户 下的联系人"></a>三、保存客户 以及客户 下的联系人</h2><p>首先我们应该想到，现在我们是保存客户，然后保存客户下的联系人。也是说，实际上我调用的只是保存客户的方法。那么联系人是级联上去。那么我们的级联就应该添加到 客户的配置中。</p><p><strong>注意：我们在测试的时候，删除之前创建的表</strong></p><h3 id="3-1-Customer-hbm-xml"><a href="#3-1-Customer-hbm-xml" class="headerlink" title="3.1 Customer.hbm.xml"></a>3.1 Customer.hbm.xml</h3><p>我们使用的级联是 <strong>save-update</strong> 也可以使用 <strong>all</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate03.domain&quot; &gt;</span><br><span class="line">    &lt;class name=&quot;Customer&quot; table=&quot;cst_customer&quot; &gt;</span><br><span class="line">        &lt;id name=&quot;cust_id&quot;  &gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;cust_name&quot; column=&quot;cust_name&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_source&quot; column=&quot;cust_source&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_industry&quot; column=&quot;cust_industry&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_level&quot; column=&quot;cust_level&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_linkman&quot; column=&quot;cust_linkman&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_phone&quot; column=&quot;cust_phone&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_mobile&quot; column=&quot;cust_mobile&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            级联操作:cascade</span><br><span class="line">                save-update: 级联保存更新</span><br><span class="line">                delete:级联删除</span><br><span class="line">                all:save-update+delete</span><br><span class="line">            级联操作: 简化操作.目的就是为了少些两行代码.</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;set name=&quot;linkMens&quot; cascade=&quot;save-update&quot;&gt;</span><br><span class="line">            &lt;key column=&quot;lkm_cust_id&quot;&gt;&lt;/key&gt;</span><br><span class="line">            &lt;one-to-many class=&quot;LinkMan&quot;&gt;&lt;/one-to-many&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-示例代码"><a href="#3-2-示例代码" class="headerlink" title="3.2 示例代码"></a>3.2 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 保存客户 以及客户 下的联系人</span><br><span class="line"> * cascade:save-update</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test1()&#123;</span><br><span class="line">    //1.获取session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    //2.开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line">    //3.操作</span><br><span class="line"></span><br><span class="line">    Customer c = new Customer();</span><br><span class="line">    c.setCust_name(&quot;吊毛公司&quot;);</span><br><span class="line"></span><br><span class="line">    LinkMan lm1 = new LinkMan();</span><br><span class="line">    lm1.setLkm_name(&quot;李吊毛&quot;);</span><br><span class="line"></span><br><span class="line">    LinkMan lm2 = new LinkMan();</span><br><span class="line">    lm2.setLkm_name(&quot;高小飞&quot;);</span><br><span class="line"></span><br><span class="line">    //表达一对多,客户下有多个联系人</span><br><span class="line">    c.getLinkMens().add(lm1);</span><br><span class="line">    c.getLinkMens().add(lm2);</span><br><span class="line"></span><br><span class="line">    //表达多对一,联系人属于哪个客户</span><br><span class="line">    lm1.setCustomer(c);</span><br><span class="line">    lm2.setCustomer(c);</span><br><span class="line">    session.save(c);</span><br><span class="line">//        session.save(lm1);</span><br><span class="line">//        session.save(lm2);</span><br><span class="line"></span><br><span class="line">    //4.提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-结果"><a href="#3-3-结果" class="headerlink" title="3.3 结果"></a>3.3 结果</h3><p><strong>客户表</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170919010003707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><p><strong>联系人表</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170919010014934?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><hr><h2 id="四、保存联系人以及联系人对应的客户"><a href="#四、保存联系人以及联系人对应的客户" class="headerlink" title="四、保存联系人以及联系人对应的客户"></a>四、保存联系人以及联系人对应的客户</h2><p>首先我们应该想到，现在我们是保存联系人，然后保存联系人对应的客户。也是说，实际上我调用的只是保存联系人的方法。那么客户是级联上去。那么我们的级联就应该添加到 联系人的配置中。</p><p><strong>注意：我们在测试的时候，删除之前创建的表。删除我们刚才在客户中配置级联</strong></p><p>我们使用的级联是 <strong>save-update</strong> 也可以使用 <strong>all</strong></p><h3 id="4-1-LinkMan-hbm-xml"><a href="#4-1-LinkMan-hbm-xml" class="headerlink" title="4.1 LinkMan.hbm.xml"></a>4.1 LinkMan.hbm.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate03.domain&quot; &gt;</span><br><span class="line">    &lt;class name=&quot;LinkMan&quot; table=&quot;cst_linkman&quot; &gt;</span><br><span class="line">        &lt;id name=&quot;lkm_id&quot;  &gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_gender&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_name&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_phone&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_email&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_qq&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_mobile&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_memo&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_position&quot;  &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 多对一 --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            name属性:引用属性名</span><br><span class="line">            column属性: 外键列名</span><br><span class="line">            class属性: 与我关联的对象完整类名</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;many-to-one name=&quot;customer&quot; column=&quot;lkm_cust_id&quot; class=&quot;Customer&quot; cascade=&quot;save-update&quot;/&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-示例代码"><a href="#4-2-示例代码" class="headerlink" title="4.2 示例代码"></a>4.2 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 保存联系人以及联系人对应的客户</span><br><span class="line"> * cascade:save-update</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">    //1.获取session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    //2.开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    //3.操作</span><br><span class="line">    //3.1创建客户</span><br><span class="line">    //3.2创建我们的联系人</span><br><span class="line">    //3.3把联系人添加到客户的中</span><br><span class="line">    //3.4把客户添加到联系人中</span><br><span class="line">    //3.5保存联系人</span><br><span class="line">    Customer c = new Customer();</span><br><span class="line">    c.setCust_name(&quot;搞笑公司&quot;);</span><br><span class="line">    LinkMan lm1 = new LinkMan();</span><br><span class="line">    lm1.setLkm_name(&quot;张笑话&quot;);</span><br><span class="line">    c.getLinkMens().add(lm1);</span><br><span class="line">    lm1.setCustomer(c);</span><br><span class="line">    session.save(lm1);</span><br><span class="line">    //4.提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-结果"><a href="#4-3-结果" class="headerlink" title="4.3 结果"></a>4.3 结果</h3><p><strong>客户表</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170919010031911?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><p><strong>联系人表</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170919010042578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170919010056633?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><hr><h2 id="五、删除客户时-级联删除客户下的联系人"><a href="#五、删除客户时-级联删除客户下的联系人" class="headerlink" title="五、删除客户时,级联删除客户下的联系人"></a>五、删除客户时,级联删除客户下的联系人</h2><p>与上面的分析一样，我们的级联应该配置在 客户中。</p><p>我们使用的级联是 <strong>delete</strong> 也可以使用 <strong>all</strong></p><h3 id="5-1-Customer-hbm-xml"><a href="#5-1-Customer-hbm-xml" class="headerlink" title="5.1 Customer.hbm.xml"></a>5.1 Customer.hbm.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate03.domain&quot; &gt;</span><br><span class="line">    &lt;class name=&quot;Customer&quot; table=&quot;cst_customer&quot; &gt;</span><br><span class="line">        &lt;id name=&quot;cust_id&quot;  &gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;cust_name&quot; column=&quot;cust_name&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_source&quot; column=&quot;cust_source&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_industry&quot; column=&quot;cust_industry&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_level&quot; column=&quot;cust_level&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_linkman&quot; column=&quot;cust_linkman&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_phone&quot; column=&quot;cust_phone&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_mobile&quot; column=&quot;cust_mobile&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            级联操作:cascade</span><br><span class="line">                save-update: 级联保存更新</span><br><span class="line">                delete:级联删除</span><br><span class="line">                all:save-update+delete</span><br><span class="line">            级联操作: 简化操作.目的就是为了少些两行代码.</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;set name=&quot;linkMens&quot; cascade=&quot;delete&quot;&gt;</span><br><span class="line">            &lt;key column=&quot;lkm_cust_id&quot;&gt;&lt;/key&gt;</span><br><span class="line">            &lt;one-to-many class=&quot;LinkMan&quot;&gt;&lt;/one-to-many&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="5-2-示例代码"><a href="#5-2-示例代码" class="headerlink" title="5.2 示例代码"></a>5.2 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 测试删除客户时,级联删除客户下的联系人</span><br><span class="line"> * cascade:delete</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test3()&#123;</span><br><span class="line">    //1.获取session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    //2.开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    //3.操作</span><br><span class="line">    //3.1获取到客户</span><br><span class="line">    //3.2获得客户</span><br><span class="line">    Customer c = session.get(Customer.class,1L);</span><br><span class="line">    session.delete(c);</span><br><span class="line">    //4.提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-结果"><a href="#5-3-结果" class="headerlink" title="5.3 结果"></a>5.3 结果</h3><p><strong>客户表</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170919010110516?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><p><strong>联系人表</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170919010121631?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate18——多对一一对多级联操作&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate18——多对一一对多级联操作&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate18——多对一
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate17——多对一一对多简单操作</title>
    <link href="http://qiwenming.github.io/hibernate/17/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/17/2017/11/19/</id>
    <published>2017-11-19T13:52:08.000Z</published>
    <updated>2018-01-18T13:51:53.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate17——多对一一对多简单操作"><a href="#SSH与SSM学习之hibernate17——多对一一对多简单操作" class="headerlink" title="SSH与SSM学习之hibernate17——多对一一对多简单操作"></a>SSH与SSM学习之hibernate17——多对一一对多简单操作</h1><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>现在有两个表，一个是<strong>客户表</strong>，一个是<strong>联系人表</strong>。它们之间存在一对多的关系。</p><p>见 <a href="http://blog.csdn.net/qiwenmingshiwo/article/details/78025056" target="_blank" rel="noopener">SSH与SSM学习之hibernate16——表与表的三种关系</a></p><p>我们来简单实现一下。</p><hr><h2 id="二、实体类"><a href="#二、实体类" class="headerlink" title="二、实体类"></a>二、实体类</h2><h3 id="2-1-Customer-客户实体"><a href="#2-1-Customer-客户实体" class="headerlink" title="2.1 Customer 客户实体"></a>2.1 Customer 客户实体</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.qwm.hibernate03.domain;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author：qiwenming</span><br><span class="line"> * @date：2017/9/18 0018   21:25</span><br><span class="line"> * @description：</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Customer &#123;</span><br><span class="line">    private Long cust_id;</span><br><span class="line">    private String cust_name;</span><br><span class="line">    private String cust_source;</span><br><span class="line">    private String cust_industry;</span><br><span class="line">    private String cust_level;</span><br><span class="line">    private String cust_linkman;</span><br><span class="line">    private String cust_phone;</span><br><span class="line">    private String cust_mobile;</span><br><span class="line">    //使用set集合,表达一对多的关系</span><br><span class="line">    private Set&lt;LinkMan&gt; linkMens = new HashSet&lt;&gt;();</span><br><span class="line">....省略了get/set方法...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-LinkMan-联系人实体"><a href="#2-2-LinkMan-联系人实体" class="headerlink" title="2.2 LinkMan 联系人实体"></a>2.2 LinkMan 联系人实体</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.qwm.hibernate03.domain;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author：qiwenming</span><br><span class="line"> * @date：2017/9/18 0018   21:26</span><br><span class="line"> * @description：</span><br><span class="line"> * 联系人</span><br><span class="line"> */</span><br><span class="line">public class LinkMan &#123;</span><br><span class="line">    private Long lkm_id;</span><br><span class="line">    private Character lkm_gender;</span><br><span class="line">    private String lkm_name;</span><br><span class="line">    private String lkm_phone;</span><br><span class="line">    private String lkm_email;</span><br><span class="line">    private String lkm_qq;</span><br><span class="line">    private String lkm_mobile;</span><br><span class="line">    private String lkm_memo;</span><br><span class="line">    private String lkm_position;</span><br><span class="line">    //表达多对一</span><br><span class="line">    private Customer customer;</span><br><span class="line">....省略了get/set方法...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、映射"><a href="#三、映射" class="headerlink" title="三、映射"></a>三、映射</h2><h3 id="3-1-映射说明"><a href="#3-1-映射说明" class="headerlink" title="3.1 映射说明"></a>3.1 映射说明</h3><p>我们需要使用到一对多和多对一映射。这里我们用到的一对多映射是<strong>set</strong>,多对一映射是<strong>many-to-one</strong></p><p><strong>set说明</strong></p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;set name=&quot;linkMens&quot;&gt;</span><br><span class="line">    &lt;key column=&quot;lkm_cust_id&quot;&gt;&lt;/key&gt;</span><br><span class="line">    &lt;one-to-many class=&quot;LinkMan&quot;&gt;&lt;/one-to-many&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure></p><p>说明：</p><p>name属性:集合属性名</p><p><key> ：外键</key></p><p>column属性: 外键列名</p><p>one-to-many：一对多</p><p>class属性: 与我关联的对象完整类名</p><hr><p><strong>many-to-one</strong>说明</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;many-to-one name=&quot;customer&quot; column=&quot;lkm_cust_id&quot; class=&quot;Customer&quot;/&gt;</span><br></pre></td></tr></table></figure><p>说明：</p><p>name属性:引用属性名</p><p>column属性: 外键列名</p><p>class属性: 与我关联的对象完整类名</p><p>==注意：<set>中的<key>的column必须与 many-to-one 中的column一致==</key></set></p><hr><h3 id="3-2-Customer-hbm-xml"><a href="#3-2-Customer-hbm-xml" class="headerlink" title="3.2 Customer.hbm.xml"></a>3.2 Customer.hbm.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate03.domain&quot; &gt;</span><br><span class="line">    &lt;class name=&quot;Customer&quot; table=&quot;cst_customer&quot; &gt;</span><br><span class="line">        &lt;id name=&quot;cust_id&quot;  &gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;cust_name&quot; column=&quot;cust_name&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_source&quot; column=&quot;cust_source&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_industry&quot; column=&quot;cust_industry&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_level&quot; column=&quot;cust_level&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_linkman&quot; column=&quot;cust_linkman&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_phone&quot; column=&quot;cust_phone&quot; &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;cust_mobile&quot; column=&quot;cust_mobile&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 集合,一对多关系,在配置文件中配置 --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            name属性:集合属性名</span><br><span class="line">            column属性: 外键列名</span><br><span class="line">            class属性: 与我关联的对象完整类名</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;set name=&quot;linkMens&quot; inverse=&quot;true&quot; cascade=&quot;delete&quot;&gt;</span><br><span class="line">            &lt;key column=&quot;lkm_cust_id&quot;&gt;&lt;/key&gt;</span><br><span class="line">            &lt;one-to-many class=&quot;LinkMan&quot;&gt;&lt;/one-to-many&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="3-3-LinkMan-hbm-xml"><a href="#3-3-LinkMan-hbm-xml" class="headerlink" title="3.3 LinkMan.hbm.xml"></a>3.3 LinkMan.hbm.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate03.domain&quot; &gt;</span><br><span class="line">    &lt;class name=&quot;LinkMan&quot; table=&quot;cst_linkman&quot; &gt;</span><br><span class="line">        &lt;id name=&quot;lkm_id&quot;  &gt;</span><br><span class="line">            &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_gender&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_name&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_phone&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_email&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_qq&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_mobile&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_memo&quot;  &gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;lkm_position&quot;  &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 多对一 --&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">            name属性:引用属性名</span><br><span class="line">            column属性: 外键列名</span><br><span class="line">            class属性: 与我关联的对象完整类名</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;many-to-one name=&quot;customer&quot; column=&quot;lkm_cust_id&quot; class=&quot;Customer&quot;/&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="3-4-hibernate-cfg-xml"><a href="#3-4-hibernate-cfg-xml" class="headerlink" title="3.4 hibernate.cfg.xml"></a>3.4 hibernate.cfg.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;</span><br><span class="line">&lt;hibernate-configuration&gt;</span><br><span class="line">    &lt;session-factory&gt;</span><br><span class="line">        &lt;!--数据库驱动--&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;</span><br><span class="line">        &lt;!--数据库url--&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://localhost:3306/htest&lt;/property&gt;</span><br><span class="line">        &lt;!--数据库连接用户名--&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.connection.username&quot;&gt;root&lt;/property&gt;</span><br><span class="line">        &lt;!--数据库连接密码--&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.connection.password&quot;&gt;xm123456&lt;/property&gt;</span><br><span class="line">        &lt;!--数据库方言--&gt;</span><br><span class="line">        &lt;!-- 数据库方言</span><br><span class="line">不同的数据库中,sql语法略有区别. 指定方言可以让hibernate框架在生成sql语句时.针对数据库的方言生成.</span><br><span class="line">sql99标准: DDL 定义语言  库表的增删改查</span><br><span class="line">   DCL 控制语言  事务 权限</span><br><span class="line">  DML 操纵语言  增删改查</span><br><span class="line"> --&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQL5Dialect&lt;/property&gt;</span><br><span class="line">        &lt;!-- #hibernate.show_sql true</span><br><span class="line">     #hibernate.format_sql true</span><br><span class="line">--&gt;</span><br><span class="line">        &lt;!-- 将hibernate生成的sql语句打印到控制台 --&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.show_sql&quot;&gt;true&lt;/property&gt;</span><br><span class="line">        &lt;!-- 将hibernate生成的sql语句格式化(语法缩进) --&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.format_sql&quot;&gt;true&lt;/property&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        ## auto schema export  自动导出表结构. 自动建表</span><br><span class="line">        #hibernate.hbm2ddl.auto create自动建表.每次框架运行都会创建新的表.以前表将会被覆盖,表数据会丢失.(开发环境中测试使用)</span><br><span class="line">        #hibernate.hbm2ddl.auto create-drop 自动建表.每次框架运行结束都会将所有表删除.(开发环境中测试使用)</span><br><span class="line">        #hibernate.hbm2ddl.auto update(推荐使用) 自动生成表.如果已经存在不会再生成.如果表有变动.自动更新表(不会删除任何数据).</span><br><span class="line">        #hibernate.hbm2ddl.auto validate校验.不自动生成表.每次启动会校验数据库中表是否正确.校验失败.</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;!--自动创建表--&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--指定session与当前线程绑定--&gt;</span><br><span class="line">        &lt;property name=&quot;hibernate.current_session_context_class&quot;&gt;thread&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--导入 User 配置--&gt;</span><br><span class="line">        &lt;!-- 引入orm元数据</span><br><span class="line">路径书写: 填写src下的路径</span><br><span class="line"> --&gt;</span><br><span class="line">        &lt;mapping resource=&quot;com/qwm/hibernate03/domain/Customer.hbm.xml&quot;&gt;&lt;/mapping&gt;</span><br><span class="line">        &lt;mapping resource=&quot;com/qwm/hibernate03/domain/LinkMan.hbm.xml&quot;&gt;&lt;/mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/session-factory&gt;</span><br><span class="line">&lt;/hibernate-configuration&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="四、测试demo"><a href="#四、测试demo" class="headerlink" title="四、测试demo"></a>四、测试demo</h2><h3 id="4-1-保存客户-以及客户-下的联系人"><a href="#4-1-保存客户-以及客户-下的联系人" class="headerlink" title="4.1 保存客户 以及客户 下的联系人"></a>4.1 保存客户 以及客户 下的联系人</h3><h4 id="4-1-1-实例代码"><a href="#4-1-1-实例代码" class="headerlink" title="4.1.1 实例代码"></a>4.1.1 实例代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 保存客户 以及客户 下的联系人</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test1()&#123;</span><br><span class="line">    //1.获取session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    //2.开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line">    //3.操作</span><br><span class="line"></span><br><span class="line">    Customer c = new Customer();</span><br><span class="line">    c.setCust_name(&quot;吊毛公司&quot;);</span><br><span class="line"></span><br><span class="line">    LinkMan lm1 = new LinkMan();</span><br><span class="line">    lm1.setLkm_name(&quot;李吊毛&quot;);</span><br><span class="line"></span><br><span class="line">    LinkMan lm2 = new LinkMan();</span><br><span class="line">    lm2.setLkm_name(&quot;高小飞&quot;);</span><br><span class="line"></span><br><span class="line">    //表达一对多,客户下有多个联系人</span><br><span class="line">    c.getLinkMens().add(lm1);</span><br><span class="line">    c.getLinkMens().add(lm2);</span><br><span class="line"></span><br><span class="line">    //表达多对一,联系人属于哪个客户</span><br><span class="line">    lm1.setCustomer(c);</span><br><span class="line">    lm2.setCustomer(c);</span><br><span class="line">    session.save(c);</span><br><span class="line">    session.save(lm1);</span><br><span class="line">    session.save(lm2);</span><br><span class="line"></span><br><span class="line">    //4.提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-2-结果"><a href="#4-1-2-结果" class="headerlink" title="4.1.2 结果"></a>4.1.2 结果</h4><p><strong>客户表</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\Administrator\Desktop\jietu\5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>联系人表</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\Administrator\Desktop\jietu\6.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h3 id="4-2-为客户添加联系人"><a href="#4-2-为客户添加联系人" class="headerlink" title="4.2 为客户添加联系人"></a>4.2 为客户添加联系人</h3><h4 id="4-2-1-实例代码"><a href="#4-2-1-实例代码" class="headerlink" title="4.2.1 实例代码"></a>4.2.1 实例代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 为客户添加联系人</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">//1.获取session</span><br><span class="line">Session session = HibernateUtils.openSession();</span><br><span class="line">//2.开启事务</span><br><span class="line">Transaction t = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">//3.操作</span><br><span class="line">//3.1获取到客户</span><br><span class="line">//3.2创建我们的联系人</span><br><span class="line">//3.3把联系人添加到客户的中</span><br><span class="line">//3.4把客户添加到联系人中</span><br><span class="line">//3.5保存联系人</span><br><span class="line">Customer c = session.get(Customer.class,1L);</span><br><span class="line">LinkMan lm1 = new LinkMan();</span><br><span class="line">lm1.setLkm_name(&quot;小明&quot;);</span><br><span class="line">c.getLinkMens().add(lm1);</span><br><span class="line">lm1.setCustomer(c);</span><br><span class="line">session.save(lm1);</span><br><span class="line">//4.提交事务</span><br><span class="line">t.commit();</span><br><span class="line">//5.关闭资源</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-结果"><a href="#4-2-2-结果" class="headerlink" title="4.2.2 结果"></a>4.2.2 结果</h4><p><strong>联系人表</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\Administrator\Desktop\jietu\7.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h3 id="4-3-为客户删除联系人"><a href="#4-3-为客户删除联系人" class="headerlink" title="4.3 为客户删除联系人"></a>4.3 为客户删除联系人</h3><h4 id="4-3-1-实例代码"><a href="#4-3-1-实例代码" class="headerlink" title="4.3.1 实例代码"></a>4.3.1 实例代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 为客户删除联系人</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void test3()&#123;</span><br><span class="line">//1.获取session</span><br><span class="line">Session session = HibernateUtils.openSession();</span><br><span class="line">//2.开启事务</span><br><span class="line">Transaction t = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">//3.操作</span><br><span class="line">//3.1获取到客户</span><br><span class="line">//3.2获得要移除的联系人</span><br><span class="line">//3.3将联系人从客户集合中移除</span><br><span class="line">Customer c = session.get(Customer.class,1L);</span><br><span class="line">LinkMan lm = session.get(LinkMan.class,3L);</span><br><span class="line">c.getLinkMens().remove(lm);</span><br><span class="line">lm.setCustomer(null);</span><br><span class="line">//4.提交事务</span><br><span class="line">t.commit();</span><br><span class="line">//5.关闭资源</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2-结果"><a href="#4-3-2-结果" class="headerlink" title="4.3.2 结果"></a>4.3.2 结果</h4><p><strong>联系人表</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\Administrator\Desktop\jietu\8.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate17——多对一一对多简单操作&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate17——多对一一对多简单操作&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate17——多对一
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate16——表与表的三种关系</title>
    <link href="http://qiwenming.github.io/hibernate/16/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/16/2017/11/19/</id>
    <published>2017-11-19T13:52:07.000Z</published>
    <updated>2018-01-18T13:51:53.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate16——表与表的三种关系"><a href="#SSH与SSM学习之hibernate16——表与表的三种关系" class="headerlink" title="SSH与SSM学习之hibernate16——表与表的三种关系"></a>SSH与SSM学习之hibernate16——表与表的三种关系</h1><h2 id="一、表与表的三种关系"><a href="#一、表与表的三种关系" class="headerlink" title="一、表与表的三种关系"></a>一、表与表的三种关系</h2><p>表与表之间有三种关系</p><blockquote><p>一对多|多对一</p><p>多对多</p><p>一对一</p></blockquote><hr><h2 id="二、表与表的三种关系数据库表中的表现"><a href="#二、表与表的三种关系数据库表中的表现" class="headerlink" title="二、表与表的三种关系数据库表中的表现"></a>二、表与表的三种关系数据库表中的表现</h2><h3 id="2-1-一对多-多对一"><a href="#2-1-一对多-多对一" class="headerlink" title="2.1 一对多|多对一"></a>2.1 一对多|多对一</h3><p>建表原则：在多的一方创建外键指向一的一方的主键</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170918231718985?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><h3 id="2-2-多对多"><a href="#2-2-多对多" class="headerlink" title="2.2 多对多"></a>2.2 多对多</h3><p>建表原则：创建一个中间表，中间表中至少两个字段作为外键分别指向多对多双方的主键。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170918231729276?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><h3 id="2-3-一对一"><a href="#2-3-一对一" class="headerlink" title="2.3 一对一"></a>2.3 一对一</h3><p>其实这种关系可以弄成一张表。</p><p>一对一建表原则有两种：</p><p>第一种：唯一外键对应，假设一对一中任意一方为多，在多的一方创建外键指向一的一方的主键，然后将外键设置为唯一。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170918231739962?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><p>第一个种：主键对应。一方的主键作为另一方的主键。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170918231749376?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure></p><hr><h2 id="三、Java对象中的表达"><a href="#三、Java对象中的表达" class="headerlink" title="三、Java对象中的表达"></a>三、Java对象中的表达</h2><h3 id="3-1-一对一"><a href="#3-1-一对一" class="headerlink" title="3.1 一对一"></a>3.1 一对一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class A</span><br><span class="line">&#123;</span><br><span class="line">public B b;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">public class B</span><br><span class="line">&#123;</span><br><span class="line">publc A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-一对多"><a href="#3-2-一对多" class="headerlink" title="3.2 一对多"></a>3.2 一对多</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class A</span><br><span class="line">&#123;</span><br><span class="line">public Set&lt;B&gt; bs;//B的集合</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">public class B</span><br><span class="line">&#123;</span><br><span class="line">publc A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-多对多"><a href="#3-3-多对多" class="headerlink" title="3.3 多对多"></a>3.3 多对多</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class A</span><br><span class="line">&#123;</span><br><span class="line">public Set&lt;B&gt; bs;//B的集合</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">public class B</span><br><span class="line">&#123;</span><br><span class="line">publc Set&lt;A&gt; as;//A的集合</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate16——表与表的三种关系&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate16——表与表的三种关系&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate16——表与表的三种关
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate15——SQL原生查询</title>
    <link href="http://qiwenming.github.io/hibernate/15/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/15/2017/11/19/</id>
    <published>2017-11-19T13:52:06.000Z</published>
    <updated>2018-01-18T13:51:53.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate15——SQL原生查询"><a href="#SSH与SSM学习之hibernate15——SQL原生查询" class="headerlink" title="SSH与SSM学习之hibernate15——SQL原生查询"></a>SSH与SSM学习之hibernate15——SQL原生查询</h1><h2 id="一、原生查询说明"><a href="#一、原生查询说明" class="headerlink" title="一、原生查询说明"></a>一、原生查询说明</h2><p>原生查询我们只要使用到的方法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//执行原生的sql</span><br><span class="line">session.createSQLQuery(sql)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//指定将结果集封装到哪个对象中</span><br><span class="line">query.addEntity(User.class);</span><br><span class="line"></span><br><span class="line">//添加参数</span><br><span class="line"> query.setParameter(0,1);</span><br></pre></td></tr></table></figure><hr><h2 id="二、基本查询"><a href="#二、基本查询" class="headerlink" title="二、基本查询"></a>二、基本查询</h2><h3 id="2-1-示例代码"><a href="#2-1-示例代码" class="headerlink" title="2.1 示例代码"></a>2.1 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Sql基本查询</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void sqlBaseDemo()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line"></span><br><span class="line">    //------------------基本查询---------------</span><br><span class="line">    //2.写sql语句</span><br><span class="line">    String sql = &quot;select * from tb_user2&quot;;</span><br><span class="line">    //3.创建sql查询对象</span><br><span class="line">    SQLQuery query = session.createSQLQuery(sql);</span><br><span class="line">    //4.指定将结果集封装到哪个对象中</span><br><span class="line">    query.addEntity(User.class);</span><br><span class="line">    //5.查询结果</span><br><span class="line">    List&lt;User&gt; users = query.list();</span><br><span class="line">    System.out.println(users);</span><br><span class="line">    //-----------------------------------------</span><br><span class="line"></span><br><span class="line">    //6.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-查询结果"><a href="#2-2-查询结果" class="headerlink" title="2.2 查询结果"></a>2.2 查询结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        * </span><br><span class="line">    from</span><br><span class="line">        tb_user2</span><br><span class="line">[User&#123;id=1, name=&apos;小明&apos;, age=20&#125;, User&#123;id=2, name=&apos;xiaoming&apos;, age=19&#125;, User&#123;id=3, name=&apos;mingming&apos;, age=22&#125;, User&#123;id=4, name=&apos;mingge&apos;, age=20&#125;, User&#123;id=5, name=&apos;xx&apos;, age=99&#125;, User&#123;id=6, name=&apos;wiming&apos;, age=20&#125;]</span><br></pre></td></tr></table></figure><hr><h2 id="三、条件查询"><a href="#三、条件查询" class="headerlink" title="三、条件查询"></a>三、条件查询</h2><h3 id="3-1-示例代码"><a href="#3-1-示例代码" class="headerlink" title="3.1 示例代码"></a>3.1 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line"> * sql 条件查询</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void sqlConditionDemo()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line"></span><br><span class="line">    //------------------条件查询---------------</span><br><span class="line">    //2.写sql语句</span><br><span class="line">    String sql = &quot;select * from tb_user2 where id=?&quot;;</span><br><span class="line">    //3.创建sql查询对象</span><br><span class="line">    SQLQuery query = session.createSQLQuery(sql);</span><br><span class="line">    //4.指定将结果集封装到哪个对象中</span><br><span class="line">    query.addEntity(User.class);</span><br><span class="line">    //5.添加参数</span><br><span class="line">    query.setParameter(0,1);</span><br><span class="line">    //6.查询结果</span><br><span class="line">    List&lt;User&gt; users = query.list();</span><br><span class="line">    System.out.println(users);</span><br><span class="line">    //-----------------------------------------</span><br><span class="line"></span><br><span class="line">    //7.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-查询结果"><a href="#3-2-查询结果" class="headerlink" title="3.2 查询结果"></a>3.2 查询结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        * </span><br><span class="line">    from</span><br><span class="line">        tb_user2 </span><br><span class="line">    where</span><br><span class="line">        id=?</span><br><span class="line">[User&#123;id=1, name=&apos;小明&apos;, age=20&#125;]</span><br></pre></td></tr></table></figure><hr><h2 id="四、分页查询"><a href="#四、分页查询" class="headerlink" title="四、分页查询"></a>四、分页查询</h2><h3 id="4-1-示例代码"><a href="#4-1-示例代码" class="headerlink" title="4.1 示例代码"></a>4.1 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Sql分页</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void sqlPageDemo()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line"></span><br><span class="line">    //------------------分页查询---------------</span><br><span class="line">    //2.写sql语句</span><br><span class="line">    String sql = &quot;select * from tb_user2 limit ?,? &quot;;</span><br><span class="line">    //3.创建sql查询对象</span><br><span class="line">    SQLQuery query = session.createSQLQuery(sql);</span><br><span class="line">    //4.指定将结果集封装到哪个对象中</span><br><span class="line">    query.addEntity(User.class);</span><br><span class="line">    //5.添加参数</span><br><span class="line">    query.setParameter(0,0);</span><br><span class="line">    query.setParameter(1,3);</span><br><span class="line">    //6.查询结果</span><br><span class="line">    List&lt;User&gt; users = query.list();</span><br><span class="line">    System.out.println(users);</span><br><span class="line">    //-----------------------------------------</span><br><span class="line"></span><br><span class="line">    //7.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-查询结果"><a href="#4-2-查询结果" class="headerlink" title="4.2 查询结果"></a>4.2 查询结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        * </span><br><span class="line">    from</span><br><span class="line">        tb_user2 limit ?,</span><br><span class="line">        ? </span><br><span class="line">[User&#123;id=1, name=&apos;小明&apos;, age=20&#125;, User&#123;id=2, name=&apos;xiaoming&apos;, age=19&#125;, User&#123;id=3, name=&apos;mingming&apos;, age=22&#125;]</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate15——SQL原生查询&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate15——SQL原生查询&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate15——SQL原生查询&quot;&gt;
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate14——Criteria查询</title>
    <link href="http://qiwenming.github.io/hibernate/14/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/14/2017/11/19/</id>
    <published>2017-11-19T13:52:05.000Z</published>
    <updated>2018-01-18T13:51:53.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate14——Criteria查询"><a href="#SSH与SSM学习之hibernate14——Criteria查询" class="headerlink" title="SSH与SSM学习之hibernate14——Criteria查询"></a>SSH与SSM学习之hibernate14——Criteria查询</h1><h2 id="一、Criteria"><a href="#一、Criteria" class="headerlink" title="一、Criteria"></a>一、Criteria</h2><p>比较适合单表查询。Hibernate自创的无语句面向对象查询。</p><h2 id="Criteria-中拥有查询的方法，如-list-uniqueResult-等。"><a href="#Criteria-中拥有查询的方法，如-list-uniqueResult-等。" class="headerlink" title="Criteria 中拥有查询的方法，如 list() ,uniqueResult()等。"></a>Criteria 中拥有查询的方法，如 list() ,uniqueResult()等。</h2><h2 id="二、基本查询"><a href="#二、基本查询" class="headerlink" title="二、基本查询"></a>二、基本查询</h2><h3 id="2-1-示例代码"><a href="#2-1-示例代码" class="headerlink" title="2.1 示例代码"></a>2.1 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Criteria基本查询</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void criteriaBaseDemo()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line"></span><br><span class="line">    //------------------基本查询---------------</span><br><span class="line">    //2.创建Criteria查询对象</span><br><span class="line">    Criteria criteria = session.createCriteria(User.class);</span><br><span class="line">    //3.获取集合</span><br><span class="line">    List&lt;User&gt; users = criteria.list();</span><br><span class="line">    //4.打印</span><br><span class="line">    System.out.println(users);</span><br><span class="line">    //-----------------------------------------</span><br><span class="line"></span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-查询结果"><a href="#2-1-查询结果" class="headerlink" title="2.1 查询结果"></a>2.1 查询结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        this_.id as id1_0_0_,</span><br><span class="line">        this_.name as name2_0_0_,</span><br><span class="line">        this_.age as age3_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_user2 this_</span><br><span class="line">[User&#123;id=1, name=&apos;小明&apos;, age=20&#125;, User&#123;id=2, name=&apos;xiaoming&apos;, age=19&#125;, User&#123;id=3, name=&apos;mingming&apos;, age=22&#125;, User&#123;id=4, name=&apos;mingge&apos;, age=20&#125;, User&#123;id=5, name=&apos;xx&apos;, age=99&#125;, User&#123;id=6, name=&apos;wiming&apos;, age=20&#125;]</span><br></pre></td></tr></table></figure><hr><h2 id="三、条件查询"><a href="#三、条件查询" class="headerlink" title="三、条件查询"></a>三、条件查询</h2><h3 id="3-1-说明"><a href="#3-1-说明" class="headerlink" title="3.1 说明"></a>3.1 说明</h3><p>使用添加查询，我们需要个Criteria添加条件，我们主要使用到 <strong>Restrictions</strong>这个类的方法</p><table><thead><tr><th>sql中的表达式</th><th>Restrictions中的方法</th></tr></thead><tbody><tr><td>&gt;</td><td>gt</td></tr><tr><td>&gt;=</td><td>ge</td></tr><tr><td>&lt;</td><td>lt</td></tr><tr><td>&lt;=</td><td>le</td></tr><tr><td>==</td><td>eq</td></tr><tr><td>!=</td><td>ne</td></tr><tr><td>in</td><td>in</td></tr><tr><td>between and</td><td>between</td></tr><tr><td>like</td><td>like</td></tr><tr><td>is not null</td><td>isNotNull</td></tr><tr><td>is null</td><td>isNull</td></tr><tr><td>or</td><td>or</td></tr><tr><td>and</td><td>and</td></tr></tbody></table><h3 id="3-2-示例代码"><a href="#3-2-示例代码" class="headerlink" title="3.2 示例代码"></a>3.2 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Criteria 条件查询</span><br><span class="line">HQL语句中,不可能出现任何数据库相关的信息的</span><br><span class="line"> &gt; gt</span><br><span class="line"> &gt;=ge</span><br><span class="line"> &lt;lt</span><br><span class="line"> &lt;=le</span><br><span class="line"> ==eq</span><br><span class="line"> !=ne</span><br><span class="line"> inin</span><br><span class="line"> between andbetween</span><br><span class="line"> like like</span><br><span class="line"> is not null isNotNull</span><br><span class="line"> is nullisNull</span><br><span class="line"> oror</span><br><span class="line"> andand</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void criteriaConditionDemo()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line"></span><br><span class="line">    //------------------条件查询---------------</span><br><span class="line"></span><br><span class="line">    //2.获取Criteria对象</span><br><span class="line">    Criteria criteria = session.createCriteria(User.class);</span><br><span class="line">    //3.添加查询参数---&gt; id 为1的User对象</span><br><span class="line">    criteria.add(Restrictions.eq(&quot;id&quot;,1));</span><br><span class="line">    User user = (User) criteria.uniqueResult();</span><br><span class="line">    //4.打印</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    //-----------------------------------------</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-查询结果"><a href="#3-3-查询结果" class="headerlink" title="3.3 查询结果"></a>3.3 查询结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        this_.id as id1_0_0_,</span><br><span class="line">        this_.name as name2_0_0_,</span><br><span class="line">        this_.age as age3_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_user2 this_ </span><br><span class="line">    where</span><br><span class="line">        this_.id=?</span><br><span class="line">User&#123;id=1, name=&apos;小明&apos;, age=20&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="四、分页查询"><a href="#四、分页查询" class="headerlink" title="四、分页查询"></a>四、分页查询</h2><h3 id="4-1-示例代码"><a href="#4-1-示例代码" class="headerlink" title="4.1 示例代码"></a>4.1 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Criteria分页</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void criteriaPageDemo()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line"></span><br><span class="line">    //------------------条件查询---------------</span><br><span class="line">    //2.创建Criteria查询对象</span><br><span class="line">    Criteria criteria = session.createCriteria(User.class);</span><br><span class="line">    //3.设置分页信息</span><br><span class="line">    // 从0开始查询</span><br><span class="line">    criteria.setFirstResult(0);</span><br><span class="line">    // 查询3条数据</span><br><span class="line">    criteria.setMaxResults(3);</span><br><span class="line">    //4.执行查询</span><br><span class="line">    List&lt;User&gt; users = criteria.list();</span><br><span class="line">    //5.打印</span><br><span class="line">    System.out.println(users);</span><br><span class="line">    //-----------------------------------------</span><br><span class="line">    //6.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-查询结果"><a href="#4-2-查询结果" class="headerlink" title="4.2 查询结果"></a>4.2 查询结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        this_.id as id1_0_0_,</span><br><span class="line">        this_.name as name2_0_0_,</span><br><span class="line">        this_.age as age3_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_user2 this_ limit ?</span><br><span class="line">[User&#123;id=1, name=&apos;小明&apos;, age=20&#125;, User&#123;id=2, name=&apos;xiaoming&apos;, age=19&#125;, User&#123;id=3, name=&apos;mingming&apos;, age=22&#125;]</span><br></pre></td></tr></table></figure><hr><h2 id="五、查询总记录数"><a href="#五、查询总记录数" class="headerlink" title="五、查询总记录数"></a>五、查询总记录数</h2><h3 id="5-1-聚合函数"><a href="#5-1-聚合函数" class="headerlink" title="5.1 聚合函数"></a>5.1 聚合函数</h3><p>Criteria 中我们可以使用聚合函数。如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//3. 设置查询的聚合函数 =&gt; 总行数</span><br><span class="line">criteria.setProjection(Projections.rowCount());</span><br></pre></td></tr></table></figure></p><p><strong>Projections</strong>中定义了很多聚合函数，例如 <strong>sum、avg、count、max、min</strong>等</p><h3 id="5-2-示例代码"><a href="#5-2-示例代码" class="headerlink" title="5.2 示例代码"></a>5.2 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Criteria查询总记录数</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void criteriaTotalDemo()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line"></span><br><span class="line">    //------------------条件查询---------------</span><br><span class="line">    //2.创建Criteria查询对象</span><br><span class="line">    Criteria criteria = session.createCriteria(User.class);</span><br><span class="line">    //3. 设置查询的聚合函数 =&gt; 总行数</span><br><span class="line">    criteria.setProjection(Projections.rowCount());</span><br><span class="line">    //4. 查询</span><br><span class="line">    Long count = (Long)criteria.uniqueResult();</span><br><span class="line">    //5. 打印</span><br><span class="line">    System.out.println(&quot;总条数：&quot;+count);</span><br><span class="line">    //-----------------------------------------</span><br><span class="line">    //6.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-查询结果"><a href="#5-3-查询结果" class="headerlink" title="5.3 查询结果"></a>5.3 查询结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        count(*) as y0_ </span><br><span class="line">    from</span><br><span class="line">        tb_user2 this_</span><br><span class="line">总条数：6</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate14——Criteria查询&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate14——Criteria查询&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate14——Cri
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate13——HQL查询</title>
    <link href="http://qiwenming.github.io/hibernate/13/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/13/2017/11/19/</id>
    <published>2017-11-19T13:52:04.000Z</published>
    <updated>2018-01-18T13:51:53.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate13——HQL查询"><a href="#SSH与SSM学习之hibernate13——HQL查询" class="headerlink" title="SSH与SSM学习之hibernate13——HQL查询"></a>SSH与SSM学习之hibernate13——HQL查询</h1><h2 id="一、hibernate查询说明"><a href="#一、hibernate查询说明" class="headerlink" title="一、hibernate查询说明"></a>一、hibernate查询说明</h2><p>hibernate查询，主要使用以下三种</p><ol><li><p>HQL查询-hibernate Query Language(主要用于多表查询,但不复杂时使用)</p></li><li><p>Criteria查询(主要用于单表条件查询)</p></li><li><p>原生SQL查询(复杂的业务查询)</p></li></ol><hr><h2 id="二、HQL查询"><a href="#二、HQL查询" class="headerlink" title="二、HQL查询"></a>二、HQL查询</h2><p>HQL查询-hibernate Query Language(主要用于多表查询,但不复杂时使用)</p><p>Hibernate独家查询语言,属于面向对象的查询语言</p><hr><h2 id="三、基本查询"><a href="#三、基本查询" class="headerlink" title="三、基本查询"></a>三、基本查询</h2><p>这个基本查询是查询全部的</p><h3 id="3-1-示例代码"><a href="#3-1-示例代码" class="headerlink" title="3.1 示例代码"></a>3.1 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * HQL基本查询</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void qhlBaseDemo()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line"></span><br><span class="line">    //------------------基本查询---------------</span><br><span class="line">    //查询全部，如果User类有不能唯一确定，那么需要完整类名</span><br><span class="line">    String sql = &quot;from User&quot;;</span><br><span class="line">    Query query = session.createQuery(sql);</span><br><span class="line"></span><br><span class="line">    //多个结果可以使用list()</span><br><span class="line">    List&lt;User&gt; users = query.list();</span><br><span class="line"></span><br><span class="line">    //如果是一个唯一的结果，那么可以使使用</span><br><span class="line">    //query.uniqueResult();</span><br><span class="line"></span><br><span class="line">    //打印集合</span><br><span class="line">    System.out.println(users);</span><br><span class="line"></span><br><span class="line">    //-----------------------------------------</span><br><span class="line"></span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-查询结果"><a href="#3-2-查询结果" class="headerlink" title="3.2 查询结果"></a>3.2 查询结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        user0_.id as id1_0_,</span><br><span class="line">        user0_.name as name2_0_,</span><br><span class="line">        user0_.age as age3_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_user2 user0_</span><br><span class="line">[User&#123;id=1, name=&apos;小明&apos;, age=20&#125;, User&#123;id=2, name=&apos;xiaoming&apos;, age=19&#125;, User&#123;id=3, name=&apos;mingming&apos;, age=22&#125;, User&#123;id=4, name=&apos;mingge&apos;, age=20&#125;, User&#123;id=5, name=&apos;xx&apos;, age=99&#125;, User&#123;id=6, name=&apos;wiming&apos;, age=20&#125;]</span><br></pre></td></tr></table></figure><hr><h2 id="四、条件查询，条件直接写死"><a href="#四、条件查询，条件直接写死" class="headerlink" title="四、条件查询，条件直接写死"></a>四、条件查询，条件直接写死</h2><h3 id="4-1-示例代码"><a href="#4-1-示例代码" class="headerlink" title="4.1 示例代码"></a>4.1 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * HQL条件查询，条件直接写死</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void qhlConditionDemo1()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line"></span><br><span class="line">    //------------------条件查询---------------</span><br><span class="line">    //查询全部，如果User类有不能唯一确定，那么需要完整类名</span><br><span class="line">    //这里id是User类的id</span><br><span class="line">    String sql = &quot;from User where id = 1&quot;;</span><br><span class="line">    Query&lt;User&gt; query = session.createQuery(sql);</span><br><span class="line"></span><br><span class="line">    //如果是一个唯一的结果，那么可以使使用</span><br><span class="line">    User user = query.uniqueResult();</span><br><span class="line"></span><br><span class="line">    //打印</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    //-----------------------------------------</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-查询结果"><a href="#4-2-查询结果" class="headerlink" title="4.2 查询结果"></a>4.2 查询结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        user0_.id as id1_0_,</span><br><span class="line">        user0_.name as name2_0_,</span><br><span class="line">        user0_.age as age3_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_user2 user0_ </span><br><span class="line">    where</span><br><span class="line">        user0_.id=1</span><br><span class="line">User&#123;id=1, name=&apos;小明&apos;, age=20&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="五、条件查询，使用-？占位符"><a href="#五、条件查询，使用-？占位符" class="headerlink" title="五、条件查询，使用 ？占位符"></a>五、条件查询，使用 ？占位符</h2><h3 id="5-1-示例代码"><a href="#5-1-示例代码" class="headerlink" title="5.1 示例代码"></a>5.1 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * HQL条件查询，使用 ？占位符</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void qhlConditionDemo2()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line"></span><br><span class="line">    //------------------条件查询---------------</span><br><span class="line">    //查询全部，如果User类有不能唯一确定，那么需要完整类名</span><br><span class="line">    //这里id是User类的id</span><br><span class="line">    String sql = &quot;from User where id = ?&quot;;</span><br><span class="line">    Query&lt;User&gt; query = session.createQuery(sql);</span><br><span class="line">    //添加参数,下标从0开始</span><br><span class="line">    query.setParameter(0,1);</span><br><span class="line">    //如果是一个唯一的结果，那么可以使使用</span><br><span class="line">    User user = query.uniqueResult();</span><br><span class="line"></span><br><span class="line">    //打印</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    //-----------------------------------------</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-查询结果"><a href="#5-2-查询结果" class="headerlink" title="5.2 查询结果"></a>5.2 查询结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        user0_.id as id1_0_,</span><br><span class="line">        user0_.name as name2_0_,</span><br><span class="line">        user0_.age as age3_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_user2 user0_ </span><br><span class="line">    where</span><br><span class="line">        user0_.id=?</span><br><span class="line">User&#123;id=1, name=&apos;小明&apos;, age=20&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="六、条件查询，使用-命名占位符"><a href="#六、条件查询，使用-命名占位符" class="headerlink" title="六、条件查询，使用 命名占位符"></a>六、条件查询，使用 命名占位符</h2><h3 id="6-1-示例代码"><a href="#6-1-示例代码" class="headerlink" title="6.1 示例代码"></a>6.1 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * HQL条件查询，使用 命名占位符</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void qhlConditionDemo3()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line"></span><br><span class="line">    //------------------条件查询---------------</span><br><span class="line">    //查询全部，如果User类有不能唯一确定，那么需要完整类名</span><br><span class="line">    //这里id是User类的id</span><br><span class="line">    String sql = &quot;from User where id = :uid&quot;;</span><br><span class="line">    Query&lt;User&gt; query = session.createQuery(sql);</span><br><span class="line">    //添加参数</span><br><span class="line">    query.setParameter(&quot;uid&quot;,1);</span><br><span class="line">    //如果是一个唯一的结果，那么可以使使用</span><br><span class="line">    User user = query.uniqueResult();</span><br><span class="line"></span><br><span class="line">    //打印</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    //-----------------------------------------</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-查询结果"><a href="#6-2-查询结果" class="headerlink" title="6.2 查询结果"></a>6.2 查询结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        user0_.id as id1_0_,</span><br><span class="line">        user0_.name as name2_0_,</span><br><span class="line">        user0_.age as age3_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_user2 user0_ </span><br><span class="line">    where</span><br><span class="line">        user0_.id=?</span><br><span class="line">User&#123;id=1, name=&apos;小明&apos;, age=20&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="七、分页查询"><a href="#七、分页查询" class="headerlink" title="七、分页查询"></a>七、分页查询</h2><h3 id="7-1-示例代码"><a href="#7-1-示例代码" class="headerlink" title="7.1 示例代码"></a>7.1 示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * HQL分页</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void qhlPageDemo()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line"></span><br><span class="line">    //------------------条件查询---------------</span><br><span class="line">    //查询全部，如果User类有不能唯一确定，那么需要完整类名</span><br><span class="line">    //这里id是User类的id</span><br><span class="line">    String sql = &quot;from User&quot;;</span><br><span class="line">    Query&lt;User&gt; query = session.createQuery(sql);</span><br><span class="line"></span><br><span class="line">    //从第0条开始</span><br><span class="line">    query.setFirstResult(0);</span><br><span class="line">    //查询3条数据</span><br><span class="line">    query.setMaxResults(3);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = query.list();</span><br><span class="line">    //打印</span><br><span class="line">    System.out.println(users);</span><br><span class="line"></span><br><span class="line">    //-----------------------------------------</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-查询结果"><a href="#7-2-查询结果" class="headerlink" title="7.2 查询结果"></a>7.2 查询结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        user0_.id as id1_0_,</span><br><span class="line">        user0_.name as name2_0_,</span><br><span class="line">        user0_.age as age3_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_user2 user0_ limit ?</span><br><span class="line">[User&#123;id=1, name=&apos;小明&apos;, age=20&#125;, User&#123;id=2, name=&apos;xiaoming&apos;, age=19&#125;, User&#123;id=3, name=&apos;mingming&apos;, age=22&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate13——HQL查询&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate13——HQL查询&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate13——HQL查询&quot;&gt;&lt;/a&gt;SS
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate12——hibernate中的事务</title>
    <link href="http://qiwenming.github.io/hibernate/12/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/12/2017/11/19/</id>
    <published>2017-11-19T13:52:03.000Z</published>
    <updated>2018-01-18T13:51:53.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate12——hibernate中的事务"><a href="#SSH与SSM学习之hibernate12——hibernate中的事务" class="headerlink" title="SSH与SSM学习之hibernate12——hibernate中的事务"></a>SSH与SSM学习之hibernate12——hibernate中的事务</h1><h2 id="一、事务"><a href="#一、事务" class="headerlink" title="一、事务"></a>一、事务</h2><h3 id="1-1-事务特性"><a href="#1-1-事务特性" class="headerlink" title="1.1 事务特性"></a>1.1 事务特性</h3><p>原子性</p><p>一致性</p><p>隔离性</p><p>持久性</p><h3 id="1-2-事务并发问题"><a href="#1-2-事务并发问题" class="headerlink" title="1.2 事务并发问题"></a>1.2 事务并发问题</h3><p>脏读</p><p>不可重复度</p><p>幻|虚读</p><h3 id="1-3-事务隔离级别"><a href="#1-3-事务隔离级别" class="headerlink" title="1.3 事务隔离级别"></a>1.3 事务隔离级别</h3><p>读未提交（脏读、不可重复度、幻|虚读）</p><p>读已提交（不可重复度、幻|虚读）</p><p>可重复读(mysql默认级别)（幻|虚读）</p><p>串行化 - 没有问题</p><hr><h2 id="二、如何在hibernate中指定数据库的隔离级别"><a href="#二、如何在hibernate中指定数据库的隔离级别" class="headerlink" title="二、如何在hibernate中指定数据库的隔离级别"></a>二、如何在hibernate中指定数据库的隔离级别</h2><p>配置事务的隔离级别，需要在hibernate的主配置文件<strong>hibernate.cfg.xml</strong>中添加如下的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 指定hibernate操作数据库时的隔离级别</span><br><span class="line">    #hibernate.connection.isolation 1|2|4|8</span><br><span class="line">    00011读未提交</span><br><span class="line">    00102读已提交</span><br><span class="line">    01004可重复读</span><br><span class="line">    10008串行化</span><br><span class="line">--&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.connection.isolation&quot;&gt;4&lt;/property&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="三、在项目中如何管理事务"><a href="#三、在项目中如何管理事务" class="headerlink" title="三、在项目中如何管理事务"></a>三、在项目中如何管理事务</h2><h3 id="3-1-管理事务说明"><a href="#3-1-管理事务说明" class="headerlink" title="3.1 管理事务说明"></a>3.1 管理事务说明</h3><ol><li><p>业务开始之前打开事务,业务执行之后提交事务. 执行过程中出现异常.回滚事务.</p></li><li><p>在dao层操作数据库需要用到session对象.在service控制事务也是使用session对象完成. 我们要确保dao层和service层使用的使用同一个session对象</p></li><li><p>在hibernate中,确保使用同一个session的问题,hibernate已经帮我们解决了. 我们开发人员只需要调用sf.getCurrentSession()方法即可获得与当前线程绑定的session对象</p></li></ol><h3 id="3-2-getCurrentSession-使用说明"><a href="#3-2-getCurrentSession-使用说明" class="headerlink" title="3.2 getCurrentSession() 使用说明"></a>3.2 getCurrentSession() 使用说明</h3><ol><li>调用getCurrentSession方法必须配合主配置中的一段配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--指定session与当前线程绑定--&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.current_session_context_class&quot;&gt;thread&lt;/property&gt;</span><br></pre></td></tr></table></figure><ol><li>通过getCurrentSession方法获得的session对象.当事务提交时,session会自动关闭.不要手动调用close关闭.</li></ol><hr><h2 id="四、service和dao实例"><a href="#四、service和dao实例" class="headerlink" title="四、service和dao实例"></a>四、service和dao实例</h2><h3 id="4-1-CustomerDaoImpl"><a href="#4-1-CustomerDaoImpl" class="headerlink" title="4.1 CustomerDaoImpl"></a>4.1 CustomerDaoImpl</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.qwm.hcrm.dao.impl;</span><br><span class="line"></span><br><span class="line">import com.qwm.hcrm.dao.CustomerDao;</span><br><span class="line">import com.qwm.hcrm.dmain.Customer;</span><br><span class="line">import com.qwm.hcrm.utils.HibernateUtils;</span><br><span class="line">import org.hibernate.Session;</span><br><span class="line">import org.hibernate.Transaction;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author：qiwenming</span><br><span class="line"> * @date：2017/9/17 0017   0:58</span><br><span class="line"> * @description：</span><br><span class="line"> */</span><br><span class="line">public class CustomerDaoImpl implements CustomerDao&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void save(Customer customer) &#123;</span><br><span class="line">        //1.获取session</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        //2.保存对象</span><br><span class="line">        session.save(customer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-CustomerServiceImpl"><a href="#4-2-CustomerServiceImpl" class="headerlink" title="4.2 CustomerServiceImpl"></a>4.2 CustomerServiceImpl</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.qwm.hcrm.service.impl;</span><br><span class="line"></span><br><span class="line">import com.qwm.hcrm.dao.CustomerDao;</span><br><span class="line">import com.qwm.hcrm.dao.impl.CustomerDaoImpl;</span><br><span class="line">import com.qwm.hcrm.dmain.Customer;</span><br><span class="line">import com.qwm.hcrm.service.CustomerService;</span><br><span class="line">import com.qwm.hcrm.utils.HibernateUtils;</span><br><span class="line">import org.hibernate.Session;</span><br><span class="line">import org.hibernate.Transaction;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author：qiwenming</span><br><span class="line"> * @date：2017/9/17 0017   1:02</span><br><span class="line"> * @description：</span><br><span class="line"> */</span><br><span class="line">public class CustomerServiceImpl implements CustomerService&#123;</span><br><span class="line">    private CustomerDao customerDao = new CustomerDaoImpl();</span><br><span class="line">    @Override</span><br><span class="line">    public void save(Customer customer) &#123;</span><br><span class="line">        Session session = HibernateUtils.getCurrentSession();</span><br><span class="line">        //打开事务</span><br><span class="line">        Transaction t = session.beginTransaction();</span><br><span class="line">        try &#123;</span><br><span class="line">            customerDao.save(customer);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            t.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">        //提交事务</span><br><span class="line">        t.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate12——hibernate中的事务&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate12——hibernate中的事务&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate1
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate11——二级缓存</title>
    <link href="http://qiwenming.github.io/hibernate/11/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/11/2017/11/19/</id>
    <published>2017-11-19T13:52:02.000Z</published>
    <updated>2018-01-18T13:51:53.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate11——二级缓存"><a href="#SSH与SSM学习之hibernate11——二级缓存" class="headerlink" title="SSH与SSM学习之hibernate11——二级缓存"></a>SSH与SSM学习之hibernate11——二级缓存</h1><h2 id="一、一级缓存解决不了多个session的问题"><a href="#一、一级缓存解决不了多个session的问题" class="headerlink" title="一、一级缓存解决不了多个session的问题"></a>一、一级缓存解决不了多个session的问题</h2><p>比如现在我们查询的数据，基本是不变的，在一级缓存（session缓存）下，我们如果是同一个session,那么有数据被缓存，但是如果我们是多个session的话，那么我们还是会多次去访问数据。然而由于数据是不变的，我们完全没必要呀。我们想要实现的就是多个session也能够直接使用，而不去查询，这样我们的二级缓存就来了。</p><hr><h2 id="二、二级缓存"><a href="#二、二级缓存" class="headerlink" title="二、二级缓存"></a>二、二级缓存</h2><p>二级缓存是SessionFactory级别的缓存，是属于进程范围的缓存。</p><p>二级缓存又称为“全局缓存”、“应用缓存”</p><p>二级缓存中的数据可适用范围是当前应用程序的所有回话</p><p>二级缓存是可插拔式缓存，默认是 <strong>EHCache</strong>,还支持其他二级缓存组件</p><p>例如：Hashtable、OSCache、SwarmCache、JBoss TreeCache等</p><hr><h2 id="三、二级缓存配置步骤"><a href="#三、二级缓存配置步骤" class="headerlink" title="三、二级缓存配置步骤"></a>三、二级缓存配置步骤</h2><h3 id="3-1-添加二级缓存对应的jar包"><a href="#3-1-添加二级缓存对应的jar包" class="headerlink" title="3.1 添加二级缓存对应的jar包"></a>3.1 添加二级缓存对应的jar包</h3><p>在我们下载的 hibernate 的文件中，有个路径是 <strong>lib\optional\ehcache</strong>，导入里面的jar包.</p><p>例如我们的是 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ehcache-2.10.3.jar</span><br><span class="line"></span><br><span class="line">hibernate-ehcache-5.2.11.Final.jar</span><br><span class="line"></span><br><span class="line">slf4j-api-1.7.7.jar</span><br></pre></td></tr></table></figure><p>不能缺少任何一个包哦。如果缺少了 <strong>hibernate-ehcache-5.2.11.Final.jar</strong>，会出现下面的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.hibernate.boot.registry.selector.spi.StrategySelectionException: Unable to resolve name [org.hibernate.cache.ehcache.EhCacheRegionFactory] as strategy [org.hibernate.cache.spi.RegionFactory ..........</span><br></pre></td></tr></table></figure><h3 id="3-2-在hibernate的主配置文件中添加配置"><a href="#3-2-在hibernate的主配置文件中添加配置" class="headerlink" title="3.2 在hibernate的主配置文件中添加配置"></a>3.2 在hibernate的主配置文件中添加配置</h3><p>我们需要在hibernate.cfg.xml中添加相应的配置，我们需要添加如下配置。</p><p>Hibernate 4.0及以后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置二级缓存的外部实现类--&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.cache.provider_class&quot;&gt;net.sf.ehcache.hibernate.EhCacheProvider&lt;/property&gt;</span><br><span class="line">&lt;!--开启二级缓存--&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.cache.use_second_level_cache&quot;&gt;true&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;hibernate.cache.region.factory_class&quot;&gt;org.hibernate.cache.ehcache.EhCacheRegionFactory&lt;/property&gt;</span><br></pre></td></tr></table></figure></p><p>Hibernate 3.3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;property name=&quot;hibernate.cache.use_second_level_cache&quot;&gt;true&lt;/property&gt;  </span><br><span class="line">&lt;property name=&quot;cache.provider_class&quot;&gt;org.hibernate.cache.EhCacheProvider&lt;/property&gt;</span><br></pre></td></tr></table></figure></p><h3 id="3-3-添加二级缓存的属性配置文件"><a href="#3-3-添加二级缓存的属性配置文件" class="headerlink" title="3.3 添加二级缓存的属性配置文件"></a>3.3 添加二级缓存的属性配置文件</h3><p>导入的 <strong>ehcache.xml</strong> 到 <strong>src</strong>下</p><h3 id="3-4-在需要被缓存的表所对应的映射文件中添加标签"><a href="#3-4-在需要被缓存的表所对应的映射文件中添加标签" class="headerlink" title="3.4 在需要被缓存的表所对应的映射文件中添加标签"></a>3.4 在需要被缓存的表所对应的映射文件中添加<cache>标签</cache></h3><p>下载我们需要在我们需要使用二级缓存的配置文件中加入 <cache> 标签。如下</cache></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate02&quot;&gt;</span><br><span class="line">    &lt;class name=&quot;User&quot; table=&quot;tb_user2&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--二级缓存配置--&gt;</span><br><span class="line">        &lt;cache usage=&quot;read-only&quot; include=&quot;all&quot; region=&quot;User&quot;&gt;&lt;/cache&gt;</span><br><span class="line"></span><br><span class="line">        &lt;id name=&quot;id&quot;&gt;</span><br><span class="line">            &lt;!--id自增--&gt;</span><br><span class="line">            &lt;generator class=&quot;increment&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;age&quot;/&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="四、标签说明"><a href="#四、标签说明" class="headerlink" title="四、标签说明"></a>四、<cache>标签说明</cache></h2><h3 id="4-1-usage"><a href="#4-1-usage" class="headerlink" title="4.1 usage"></a>4.1 usage</h3><p>usage：指定缓存策略，可选的策略是包括：transactional,read-write、nonstrict-read-write或read-only</p><p>这个具体含义可以查看</p><p><a href="http://blog.csdn.net/luckyzhoustar/article/details/47748179" target="_blank" rel="noopener">详解Hibernate中的二级缓存</a></p><h3 id="4-2-include"><a href="#4-2-include" class="headerlink" title="4.2 include"></a>4.2 include</h3><p>include（可选,默认为 all） non-lazy 当属性级延迟抓取打开时，标记为 lazy=”true” 的实<br>体的属性可能无法被</p><h3 id="4-3-region"><a href="#4-3-region" class="headerlink" title="4.3 region"></a>4.3 region</h3><p>region （可选，默认为类或者集合的名字（class or collection role name）） 指定第二<br>级缓存的区域名（name of the second level cache region）</p><p>在 <strong>ehcache.xml</strong> 配置</p><hr><h2 id="五、代码测试"><a href="#五、代码测试" class="headerlink" title="五、代码测试"></a>五、代码测试</h2><h3 id="5-1-测试代码"><a href="#5-1-测试代码" class="headerlink" title="5.1 测试代码"></a>5.1 测试代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 二级缓存，我们使用多个session来查询数据</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void cacheTest1()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    //2.获取到数据</span><br><span class="line">    User user1 = session.get(User.class,1);</span><br><span class="line"></span><br><span class="line">    System.out.println(user1);</span><br><span class="line"></span><br><span class="line">    //3.创建新的session</span><br><span class="line">    session = HibernateUtils.openSession();</span><br><span class="line">    //4.获取数据</span><br><span class="line">    User user2 = session.get(User.class,1);</span><br><span class="line"></span><br><span class="line">    System.out.println(user2);</span><br><span class="line"></span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-没有二级缓存的结果"><a href="#5-2-没有二级缓存的结果" class="headerlink" title="5.2 没有二级缓存的结果"></a>5.2 没有二级缓存的结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        user0_.id as id1_0_0_,</span><br><span class="line">        user0_.name as name2_0_0_,</span><br><span class="line">        user0_.age as age3_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_user2 user0_ </span><br><span class="line">    where</span><br><span class="line">        user0_.id=?</span><br><span class="line">User&#123;id=1, name=&apos;小明&apos;, age=20&#125;</span><br><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        user0_.id as id1_0_0_,</span><br><span class="line">        user0_.name as name2_0_0_,</span><br><span class="line">        user0_.age as age3_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_user2 user0_ </span><br><span class="line">    where</span><br><span class="line">        user0_.id=?</span><br><span class="line">User&#123;id=1, name=&apos;小明&apos;, age=20&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-有二级缓存的结果"><a href="#5-3-有二级缓存的结果" class="headerlink" title="5.3 有二级缓存的结果"></a>5.3 有二级缓存的结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        user0_.id as id1_0_0_,</span><br><span class="line">        user0_.name as name2_0_0_,</span><br><span class="line">        user0_.age as age3_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_user2 user0_ </span><br><span class="line">    where</span><br><span class="line">        user0_.id=?</span><br><span class="line">User&#123;id=1, name=&apos;小明&apos;, age=20&#125;</span><br><span class="line">User&#123;id=1, name=&apos;小明&apos;, age=20&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate11——二级缓存&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate11——二级缓存&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate11——二级缓存&quot;&gt;&lt;/a&gt;SSH与S
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate10——Hibernate的一级缓存</title>
    <link href="http://qiwenming.github.io/hibernate/10/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/10/2017/11/19/</id>
    <published>2017-11-19T13:52:01.000Z</published>
    <updated>2018-01-18T13:51:53.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate10——Hibernate的一级缓存"><a href="#SSH与SSM学习之hibernate10——Hibernate的一级缓存" class="headerlink" title="SSH与SSM学习之hibernate10——Hibernate的一级缓存"></a>SSH与SSM学习之hibernate10——Hibernate的一级缓存</h1><h2 id="一、Hibernate的一级缓存"><a href="#一、Hibernate的一级缓存" class="headerlink" title="一、Hibernate的一级缓存"></a>一、Hibernate的一级缓存</h2><p>1 缓存是计算机领域非常通用的概念。它介于应用程序和永久性数据存储源(如硬盘上的文件或者<br>数据库)之间，</p><p>其作用是降低应用程序直接读写永久性数据存储源的频率，从而提高应用的运行性能。</p><p>缓存中的数据是数据存储源中数据的拷贝。缓存的物理介质通常是内存。</p><hr><p>2 hibernate的缓存分为<strong>一级缓存</strong>和<strong>二级缓存</strong>， Hibernate的这两级缓存都位于持久化层，</p><p>存储的都是数据库数据的备份。其屮第一级缓存为hibernate的内存缓存，不能被卸载。</p><hr><h3 id="1-1-什么是Hibernate的一级缓存"><a href="#1-1-什么是Hibernate的一级缓存" class="headerlink" title="1.1 什么是Hibernate的一级缓存"></a>1.1 什么是Hibernate的一级缓存</h3><p>1 <strong>Hibernate的一级缓存就是指Session缓存</strong>， Session缓存是一块内存空间，</p><p>用来存放相互管理的java对象，在使用Hibernate查询对象的时候，</p><p>首先会使用对象属性的OID值在Hibernate的一级缓存中进行查找，</p><p>如果找到匹配OID值的对象，就直接将该对象从一级缓存中取出使用，不会再查询数据库 ；</p><p>如果没有找到相同OID值的对象，则会去数据库中查找相应数据。</p><p>当从数据库中查询到所需数据时，该数据信息也会放置到一级缓存中。</p><p>hibernate的一级缓存的作用就足减少对数据库的访问次数</p><h3 id="1-2-Hibernate的一级缓存的特点"><a href="#1-2-Hibernate的一级缓存的特点" class="headerlink" title="1.2 Hibernate的一级缓存的特点"></a>1.2 Hibernate的一级缓存的特点</h3><p> <strong>在Session接口的实现中包含一系列的 Java集合，这些Java集合构成了 Session缓存</strong>。</p><p>只要Session实例没有结束生命周期，存放在它缓存中的对象也不会结束生命周期。</p><p>固一级缓存也被称为是Session基本的缓存。</p><hr><p>Hibernate的一级缓存有如下特点：</p><blockquote><p>当应用程序调用Session接门的save()、 update()、 saveOrUpdate时，如果Session缓存中没<br>有相应的对象， Hibernate就会自动的把从数据库中查询到的相应对象信息加入到一级缓存<br>中去。</p><p>当调用Session接口的load()、 get()方法，以及Query接口的list()、 iterator()方法时，会判<br>断缓存中是否存在该对象，有则返回，不会查询数据库，如果缓存中没有要杳询对象，再<br>去数据库中杳询对应对象，并添加到一级缓存中。</p><p>当调用Session的close()方法时， Session缓存会被清空</p></blockquote><hr><h2 id="二、证明一级缓存存在"><a href="#二、证明一级缓存存在" class="headerlink" title="二、证明一级缓存存在"></a>二、证明一级缓存存在</h2><p>下面我们来使创建我们的代码，证明一级缓存的存在。</p><h3 id="2-1-代码实例"><a href="#2-1-代码实例" class="headerlink" title="2.1 代码实例"></a>2.1 代码实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 一级缓存测试一 证明一级缓存存在</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void cacheTest1()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    //2.开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line">    //3.查询对象</span><br><span class="line">    User user1 = session.get(User.class,1);</span><br><span class="line">    User user2 = session.get(User.class,1);</span><br><span class="line">    User user3 = session.get(User.class,1);</span><br><span class="line">    User user4 = session.get(User.class,1);</span><br><span class="line">    User user5 = session.get(User.class,1);</span><br><span class="line">    //打印</span><br><span class="line">    System.out.println( &quot;user1 == user2 : &quot; + (user1 == user2));</span><br><span class="line">    System.out.println( &quot;user1 == user3 : &quot; + (user1 == user3));</span><br><span class="line">    System.out.println( &quot;user1 == user4 : &quot; + (user1 == user4));</span><br><span class="line">    System.out.println( &quot;user1 == user5 : &quot; + (user1 == user5));</span><br><span class="line"></span><br><span class="line">    //4.提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-运行结果"><a href="#2-2-运行结果" class="headerlink" title="2.2 运行结果"></a>2.2 运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        user0_.id as id1_0_0_,</span><br><span class="line">        user0_.name as name2_0_0_,</span><br><span class="line">        user0_.age as age3_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_user2 user0_ </span><br><span class="line">    where</span><br><span class="line">        user0_.id=?</span><br><span class="line">user1 == user2 : true</span><br><span class="line">user1 == user3 : true</span><br><span class="line">user1 == user4 : true</span><br><span class="line">user1 == user5 : true</span><br></pre></td></tr></table></figure><h3 id="2-3-分析"><a href="#2-3-分析" class="headerlink" title="2.3 分析"></a>2.3 分析</h3><p>我们总共调用了 5 次 <strong>get</strong> 的方法，然而只执行了一次 数据库的查询操作。而且我们获取到的 5个对象都是同一个对象。这就是因为一级缓存的原因了。</p><h4 id="2-3-1-一级缓存图示"><a href="#2-3-1-一级缓存图示" class="headerlink" title="2.3.1 一级缓存图示"></a>2.3.1 一级缓存图示</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170917060620014?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><h4 id="2-3-2-一级缓存下查询分析"><a href="#2-3-2-一级缓存下查询分析" class="headerlink" title="2.3.2 一级缓存下查询分析"></a>2.3.2 一级缓存下查询分析</h4><ol><li><p>应用程序调用get查询id为1数据；</p></li><li><p>hibernate先从缓存中查看是否存在id为1的User的对象。如果有，直接放回缓存中的对象，如果没有执行步骤3；</p></li><li><p>hibernate发送sql到数据库中</p></li><li><p>数据库通过ResultSet放回结果到hibernate中；</p></li><li><p>如果ResultSet返回数据，那么hibernate把ResultSet中的数据组装成User对象；</p></li><li><p>把User对象存入到session缓存中；</p></li><li><p>hibernate把缓存对象返回给应用程序。</p></li></ol><hr><h2 id="三、快照"><a href="#三、快照" class="headerlink" title="三、快照"></a>三、快照</h2><p>快照其实就是一个存储了查询到的数据的集合。</p><h3 id="3-1-代码实例"><a href="#3-1-代码实例" class="headerlink" title="3.1 代码实例"></a>3.1 代码实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 一级缓存测试二 快照</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void cacheTest2()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    //2.开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line">    //3.查询对象</span><br><span class="line">    User user = session.get(User.class,1);</span><br><span class="line">    System.out.println(&quot;查询到名称：&quot;+user.getName());</span><br><span class="line">    user.setName(&quot;wiming&quot;);</span><br><span class="line">    user.setName(&quot;小明&quot;);</span><br><span class="line"></span><br><span class="line">    //4.提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-运行结果"><a href="#3-2-运行结果" class="headerlink" title="3.2 运行结果"></a>3.2 运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    select</span><br><span class="line">        user0_.id as id1_0_0_,</span><br><span class="line">        user0_.name as name2_0_0_,</span><br><span class="line">        user0_.age as age3_0_0_ </span><br><span class="line">    from</span><br><span class="line">        tb_user2 user0_ </span><br><span class="line">    where</span><br><span class="line">        user0_.id=?</span><br><span class="line">查询到名称：小明</span><br></pre></td></tr></table></figure><h3 id="3-3-分析"><a href="#3-3-分析" class="headerlink" title="3.3 分析"></a>3.3 分析</h3><p>我们拿到的user是一个持久化状态的对象，它的所有改变都会同步到数据中。上面我们首先我们</p><p>查询到了 user 中的name是“小明”，然后我们设置了它的name为“wiming”,再然后我们又把name设置</p><p>回 “小明”，我们发现我们的这个修改不会同步到数据库。这就是快照的原因啦。</p><h4 id="3-3-1-缓存和快照图示"><a href="#3-3-1-缓存和快照图示" class="headerlink" title="3.3.1 缓存和快照图示"></a>3.3.1 缓存和快照图示</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170917060638947?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><h4 id="3-3-2-缓存和快照下查询分析"><a href="#3-3-2-缓存和快照下查询分析" class="headerlink" title="3.3.2 缓存和快照下查询分析"></a>3.3.2 缓存和快照下查询分析</h4><ol><li><p>应用程序调用get查询id为1数据；</p></li><li><p>hibernate先从缓存中查看是否存在id为1的User的对象。如果有，直接放回缓存中的对象，如果没有执行步骤3；</p></li><li><p>hibernate发送sql到数据库中</p></li><li><p>数据库通过ResultSet放回结果到hibernate中；</p></li><li><p>如果ResultSet返回数据，那么hibernate把ResultSet中的数据组装成User对象（会组装成为两个对象）；</p></li><li><p>组装成的这两个对象，一个放入到session缓存中，一个放入到快照中；</p></li><li><p>hibernate把缓存对象返回给应用程序；</p></li><li><p>我们的应用程序修改了缓存中的对象；</p></li><li><p>应用程序向hibernate提交了事务，</p></li><li><p>hibernate对比缓存中对象和快照。如果有变化就会同步到数据库中。</p></li></ol><hr><h2 id="四、持久化状态对象其实就是放入session缓存中的对象"><a href="#四、持久化状态对象其实就是放入session缓存中的对象" class="headerlink" title="四、持久化状态对象其实就是放入session缓存中的对象"></a>四、持久化状态对象其实就是放入session缓存中的对象</h2><h3 id="4-1-代码实例"><a href="#4-1-代码实例" class="headerlink" title="4.1 代码实例"></a>4.1 代码实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 一级缓存测试三</span><br><span class="line"> * 持久化状态对象其实就是放入session缓存中的对象</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void cacheTest3()&#123;</span><br><span class="line">    //1.创建session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    //2.开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    //3.创建对象</span><br><span class="line">    User user = new User();//瞬时状态。没有id,没有添加到session缓存中</span><br><span class="line">    user.setId(1);//游离|托管状态 。有id,没有添加到session缓存中</span><br><span class="line">    session.update(user);// 游离|托管状态 -----&gt;持久化状态</span><br><span class="line">    // 获取id为1的对象</span><br><span class="line">    User user2 = session.get(User.class,1);</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;user == user2 :&quot; + (user == user2));</span><br><span class="line"></span><br><span class="line">    System.out.println(&quot;---已经是持久化状态了，下面要执行的是commit了----&quot;);</span><br><span class="line"></span><br><span class="line">    //4.提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //5.关闭资源</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-运行结果"><a href="#4-2-运行结果" class="headerlink" title="4.2 运行结果"></a>4.2 运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">user == user2 :true</span><br><span class="line">---已经是持久化状态了，下面要执行的是commit了----</span><br><span class="line">Hibernate: </span><br><span class="line">    update</span><br><span class="line">        tb_user2 </span><br><span class="line">    set</span><br><span class="line">        name=?,</span><br><span class="line">        age=? </span><br><span class="line">    where</span><br><span class="line">        id=?</span><br></pre></td></tr></table></figure><h3 id="4-3-分析"><a href="#4-3-分析" class="headerlink" title="4.3 分析"></a>4.3 分析</h3><p>上面我们可以看到，我们的user通过update从<strong>游离|托管状态 变成了 持久化状态</strong>，</p><p>然而这个时候是没有执行sql的。然后我们通过 session 的get方法，获取数据，也是没有执行sql</p><p>我们获取到了 user2 ,然后我们发现 user和user2是同一个对象。最后我们提交事务，这个时候才会</p><p>去执行更新的sql语句。</p><p>由分析我们可以得出 持久化状态对象其实就是放入session缓存中的对象。</p><hr><h2 id="五、提高效率的手段"><a href="#五、提高效率的手段" class="headerlink" title="五、提高效率的手段"></a>五、提高效率的手段</h2><p>提高效率手段1:提高查询效率</p><blockquote><p>如一级缓存。</p></blockquote><p>提高效率手段2:减少不必要的修改语句发送</p><blockquote><p>如快照</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate10——Hibernate的一级缓存&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate10——Hibernate的一级缓存&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernat
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate09——对象的三种状态</title>
    <link href="http://qiwenming.github.io/hibernate/09/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/09/2017/11/19/</id>
    <published>2017-11-19T13:52:00.000Z</published>
    <updated>2018-01-18T13:51:53.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate09——对象的三种状态"><a href="#SSH与SSM学习之hibernate09——对象的三种状态" class="headerlink" title="SSH与SSM学习之hibernate09——对象的三种状态"></a>SSH与SSM学习之hibernate09——对象的三种状态</h1><h2 id="一、对象的三种状态"><a href="#一、对象的三种状态" class="headerlink" title="一、对象的三种状态"></a>一、对象的三种状态</h2><p>hibernate中，对象拥有三种状态：瞬时状态、持久化状态、游离|托管状态。</p><h3 id="1-1-瞬时状态"><a href="#1-1-瞬时状态" class="headerlink" title="1.1 瞬时状态"></a>1.1 瞬时状态</h3><p><strong>瞬时状态：没有id,没有在session缓存中。</strong></p><p>例如下面的user实例就是 <strong>瞬时状态</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User user = new User();// 瞬时状态。没有id，没有与session 关联</span><br><span class="line">user.setName(&quot;xiaoming&quot;);// 瞬时状态。没有id，没有与session 关联</span><br><span class="line">user.setAge(19);// 瞬时状态。没有id，没有与session 关联</span><br></pre></td></tr></table></figure><hr><h3 id="1-2-持久化状态"><a href="#1-2-持久化状态" class="headerlink" title="1.2 持久化状态"></a>1.2 持久化状态</h3><p><strong>持久化状态：有id,在session缓存中。</strong></p><p>例如下面的user实例就是 <strong>瞬时状态</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.save(user);//持久化状态。有id,与session关联</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User user = session.get(User.class,1);// 持久化状态。有id,与session关联</span><br></pre></td></tr></table></figure><hr><h3 id="1-3-游离-托管状态"><a href="#1-3-游离-托管状态" class="headerlink" title="1.3 游离|托管状态"></a>1.3 游离|托管状态</h3><p><strong>游离|托管状态：有id,没有在session缓存中。</strong></p><p>例如下面的user实例就是 <strong>瞬时状态</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">User user = new User();// 瞬时状态。没有id，没有与session 关联</span><br><span class="line">user.setName(&quot;xiaoming&quot;);// 瞬时状态。没有id，没有与session 关联</span><br><span class="line">user.setAge(19);// 瞬时状态。没有id，没有与session 关联</span><br><span class="line"></span><br><span class="line">session.save(user);//持久化状态。有id,与session关联</span><br><span class="line">//--------------------------------------------</span><br><span class="line"></span><br><span class="line">//3.提交事务</span><br><span class="line">t.commit();</span><br><span class="line">//4.关闭资源</span><br><span class="line">session.close();//游离|托管状态。有id，没有与session关联</span><br></pre></td></tr></table></figure><hr><h2 id="二、持久化状态对象的任何变化都会自动同步到数据库中"><a href="#二、持久化状态对象的任何变化都会自动同步到数据库中" class="headerlink" title="二、持久化状态对象的任何变化都会自动同步到数据库中"></a>二、持久化状态对象的任何变化都会自动同步到数据库中</h2><p>例如下面的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">三种状态特点</span><br><span class="line"> 持久化状态特点: 持久化状态对象的任何变化都会自动同步到数据库中.</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void statusDemo3()&#123;</span><br><span class="line">    //1.获取Session</span><br><span class="line">    Session session = HibernateUtils.openSession();</span><br><span class="line">    //2.开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    //-------------------------------------------</span><br><span class="line"></span><br><span class="line">    User user = session.get(User.class,1);// 持久化状态。有id,与session关联</span><br><span class="line">    System.out.println(&quot;修改name属性前---&quot;+user);</span><br><span class="line"></span><br><span class="line">    user.setName(&quot;杞文明&quot;);//持久化状态。有id,与session关联</span><br><span class="line"></span><br><span class="line">    user = session.get(User.class,1);// 持久化状态。有id,与session关联</span><br><span class="line">    System.out.println(&quot;修改name属性后---&quot;+user);</span><br><span class="line"></span><br><span class="line">    //--------------------------------------------</span><br><span class="line"></span><br><span class="line">    //3.提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //4.关闭资源</span><br><span class="line">    session.close();//游离|托管状态。有id，没有与session关联</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改name属性前---User&#123;id=1, name=&apos;xiaoming&apos;, age=19&#125;</span><br><span class="line">修改name属性后---User&#123;id=1, name=&apos;杞文明&apos;, age=19&#125;</span><br></pre></td></tr></table></figure><p><strong>HibernateUtils.java</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.qwm.hibernate02;</span><br><span class="line"></span><br><span class="line">import org.hibernate.Session;</span><br><span class="line">import org.hibernate.SessionFactory;</span><br><span class="line">import org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author：qiwenming</span><br><span class="line"> * @date：2017/9/17 0017   2:39</span><br><span class="line"> * @description：</span><br><span class="line"> * Hibernate工具类</span><br><span class="line"> */</span><br><span class="line">public class HibernateUtils &#123;</span><br><span class="line">    private static SessionFactory factory;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">        //1 创建,调用空参构造</span><br><span class="line">        Configuration conf = new Configuration().configure();</span><br><span class="line">        //2 根据配置信息,创建 SessionFactory对象</span><br><span class="line">        factory = conf.buildSessionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //获得session =&gt; 获得全新session</span><br><span class="line">    public static Session openSession()&#123;</span><br><span class="line">        //3 获得session</span><br><span class="line">        Session session = factory.openSession();</span><br><span class="line"></span><br><span class="line">        return session;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //获得session =&gt; 获得与线程绑定的session</span><br><span class="line">    public static Session getCurrentSession()&#123;</span><br><span class="line">        //3 获得session</span><br><span class="line">        Session session = factory.getCurrentSession();</span><br><span class="line"></span><br><span class="line">        return session;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、对象的三种状态转换"><a href="#三、对象的三种状态转换" class="headerlink" title="三、对象的三种状态转换"></a>三、对象的三种状态转换</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170917033815375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate09——对象的三种状态&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate09——对象的三种状态&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate09——对象的三种状态&quot;&gt;
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate08——hibernate中的实体规则</title>
    <link href="http://qiwenming.github.io/hibernate/08/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/08/2017/11/19/</id>
    <published>2017-11-19T13:51:59.000Z</published>
    <updated>2018-01-18T13:51:53.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate08——hibernate中的实体规则"><a href="#SSH与SSM学习之hibernate08——hibernate中的实体规则" class="headerlink" title="SSH与SSM学习之hibernate08——hibernate中的实体规则"></a>SSH与SSM学习之hibernate08——hibernate中的实体规则</h1><h2 id="一、实体类创建的注意事项"><a href="#一、实体类创建的注意事项" class="headerlink" title="一、实体类创建的注意事项"></a>一、实体类创建的注意事项</h2><ol><li><p>持久化类提供无参数构造</p></li><li><p>成员变量私有,提供共有get/set方法访问.需提供属性（JavaBean）</p></li><li><p>持久化类中的属性,应尽量使用包装类型</p></li><li><p>持久化类需要提供oid.与数据库中的主键列对应</p></li><li><p>不要用final修饰 class ( hibernate使用cglib代理生成代理对象.代理对象是继承被代理对象.如果被final修饰.将无法生成代理 )</p></li></ol><hr><p>例如我们的User类就是满足上面条件的</p><p><strong>User</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.qwm.hibernate02;</span><br><span class="line">/**</span><br><span class="line"> * @author：qiwenming</span><br><span class="line"> * @date：2017/9/17 0017   2:00</span><br><span class="line"> * @description：</span><br><span class="line"> * User类</span><br><span class="line"> */</span><br><span class="line">public class User &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line"></span><br><span class="line">    public User() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User(String name, Integer age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(Integer age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、主键类型"><a href="#二、主键类型" class="headerlink" title="二、主键类型"></a>二、主键类型</h2><h3 id="2-1-自然主键-少见"><a href="#2-1-自然主键-少见" class="headerlink" title="2.1 自然主键(少见)"></a>2.1 自然主键(少见)</h3><p>表的业务列中,有某业务列符合,必须有,并且不重复的特征时,该列可以作为主键使用.</p><h3 id="2-2-代理主键-常见"><a href="#2-2-代理主键-常见" class="headerlink" title="2.2 代理主键(常见)"></a>2.2 代理主键(常见)</h3><p>表的业务列中,没有某业务列符合,必须有,并且不重复的特征时,创建一个没有业务意义的列作为主键</p><hr><h2 id="三、主键生成策略"><a href="#三、主键生成策略" class="headerlink" title="三、主键生成策略"></a>三、主键生成策略</h2><h3 id="3-1-代理主键"><a href="#3-1-代理主键" class="headerlink" title="3.1 代理主键"></a>3.1 代理主键</h3><blockquote><p>identity : 主键自增.由数据库来维护主键值.录入时不需要指定主键.</p><p>sequence: Oracle中的主键生成策略.</p><p>increment: 主键自增.由hibernate来维护.每次插入前会先查询表中id最大值.+1作为新主键值.            </p><p>hilo: 高低位算法.主键自增.由hibernate来维护.开发时不使用.</p><p>native:hilo+sequence+identity 自动三选一策略.</p><p>uuid: 产生随机字符串作为主键. 主键类型必须为string 类型.</p></blockquote><p>例如我们的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate02&quot;&gt;</span><br><span class="line">    &lt;class name=&quot;User&quot; table=&quot;tb_user2&quot;&gt;</span><br><span class="line">        &lt;id name=&quot;id&quot;&gt;</span><br><span class="line">            &lt;!--id自增--&gt;</span><br><span class="line">            &lt;!-- generator:主键生成策略 --&gt;</span><br><span class="line">            &lt;!-- generator:主键生成策略.就是每条记录录入时,主键的生成规则.(7个)</span><br><span class="line">                    identity :  主键自增.由数据库来维护主键值.录入时不需要指定主键.</span><br><span class="line">                    sequence:   Oracle中的主键生成策略.</span><br><span class="line">                    increment:  主键自增.由hibernate来维护.每次插入前会先查询表中id最大值.+1作为新主键值.</span><br><span class="line">                    hilo:       高低位算法.主键自增.由hibernate来维护.开发时不使用.</span><br><span class="line">                    native:     hilo+sequence+identity 自动三选一策略.</span><br><span class="line">                    uuid:       产生随机字符串作为主键. 主键类型必须为string 类型.</span><br><span class="line">                    assigned:   自然主键生成策略. hibernate不会管理主键值.由开发人员自己录入.</span><br><span class="line">            --&gt;</span><br><span class="line">            &lt;generator class=&quot;increment&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;age&quot;/&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-自然主键"><a href="#3-2-自然主键" class="headerlink" title="3.2 自然主键"></a>3.2 自然主键</h3><p>assigned:自然主键生成策略. hibernate不会管理主键值.由开发人员自己录入.</p><p>例如我们的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span><br><span class="line">        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;hibernate-mapping package=&quot;com.qwm.hibernate02&quot;&gt;</span><br><span class="line">    &lt;class name=&quot;User&quot; table=&quot;tb_user2&quot;&gt;</span><br><span class="line">        &lt;id name=&quot;id&quot;&gt;</span><br><span class="line">            &lt;generator class=&quot;assigned&quot;&gt;&lt;/generator&gt;</span><br><span class="line">        &lt;/id&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;age&quot;/&gt;</span><br><span class="line">    &lt;/class&gt;</span><br><span class="line">&lt;/hibernate-mapping&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate08——hibernate中的实体规则&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate08——hibernate中的实体规则&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibern
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate07——Transaction</title>
    <link href="http://qiwenming.github.io/hibernate/07/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/07/2017/11/19/</id>
    <published>2017-11-19T13:51:58.000Z</published>
    <updated>2018-01-18T13:51:53.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate07——Transaction"><a href="#SSH与SSM学习之hibernate07——Transaction" class="headerlink" title="SSH与SSM学习之hibernate07——Transaction"></a>SSH与SSM学习之hibernate07——Transaction</h1><h2 id="一、Transaction"><a href="#一、Transaction" class="headerlink" title="一、Transaction"></a>一、Transaction</h2><p>Transaction 封装了事务的操作。</p><h3 id="1-1-开启事务"><a href="#1-1-开启事务" class="headerlink" title="1.1 开启事务"></a>1.1 开启事务</h3><p>开启事务有两种方式，推荐第二种</p><p>方式一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Transaction t = session.getTransaction();</span><br><span class="line">t.begin();</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transaction t = session.beginTransaction();</span><br></pre></td></tr></table></figure><h3 id="1-2-提交事务"><a href="#1-2-提交事务" class="headerlink" title="1.2 提交事务"></a>1.2 提交事务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.commit();</span><br></pre></td></tr></table></figure><h3 id="1-3-回滚事务"><a href="#1-3-回滚事务" class="headerlink" title="1.3 回滚事务"></a>1.3 回滚事务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.rollback();</span><br></pre></td></tr></table></figure><hr><h2 id="二、提交事务实例"><a href="#二、提交事务实例" class="headerlink" title="二、提交事务实例"></a>二、提交事务实例</h2><h3 id="2-1-代码"><a href="#2-1-代码" class="headerlink" title="2.1 代码"></a>2.1 代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 提交事务</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void commitDemo()&#123;</span><br><span class="line">    // 1. 配置类型安全的准服务注册类，这是当前应用的单例对象，不作修改，所以声明为final</span><br><span class="line">    final StandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure(&quot;hibernate.cfg.xml&quot;).build();</span><br><span class="line">    // 2. 根据服务注册类创建一个元数据资源集，同时构建元数据并生成应用一般唯一的的session工厂</span><br><span class="line">    SessionFactory factory = new MetadataSources(registry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line">    //3 获取session</span><br><span class="line">    Session session = factory.openSession();</span><br><span class="line"></span><br><span class="line">    //4 开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    //--------------------增加数据--------------------</span><br><span class="line">    User user = new User(&quot;qwm_commit&quot;,10);</span><br><span class="line">    //5 保存数据</span><br><span class="line">    session.save(user);</span><br><span class="line">    //或者使用 session.persist(user);</span><br><span class="line">    //----------------------------------------</span><br><span class="line"></span><br><span class="line">    //6 提交事务</span><br><span class="line">    t.commit();</span><br><span class="line"></span><br><span class="line">    //7 关闭session</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-结果"><a href="#2-2-结果" class="headerlink" title="2.2 结果"></a>2.2 结果</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://note.youdao.com/favicon.ico" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><hr><h2 id="三、回滚事务实例"><a href="#三、回滚事务实例" class="headerlink" title="三、回滚事务实例"></a>三、回滚事务实例</h2><h3 id="2-1-代码-1"><a href="#2-1-代码-1" class="headerlink" title="2.1 代码"></a>2.1 代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 回滚事务</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void rollbackDemo()&#123;</span><br><span class="line">    // 1. 配置类型安全的准服务注册类，这是当前应用的单例对象，不作修改，所以声明为final</span><br><span class="line">    final StandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure(&quot;hibernate.cfg.xml&quot;).build();</span><br><span class="line">    // 2. 根据服务注册类创建一个元数据资源集，同时构建元数据并生成应用一般唯一的的session工厂</span><br><span class="line">    SessionFactory factory = new MetadataSources(registry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line">    //3 获取session</span><br><span class="line">    Session session = factory.openSession();</span><br><span class="line"></span><br><span class="line">    //4 开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    //--------------------增加数据--------------------</span><br><span class="line">    User user = new User(&quot;qwm_rollback&quot;,10);</span><br><span class="line">    //5 保存数据</span><br><span class="line">    session.save(user);</span><br><span class="line">    //或者使用 session.persist(user);</span><br><span class="line">    //----------------------------------------</span><br><span class="line"></span><br><span class="line">    //6 回滚事务</span><br><span class="line">    t.rollback();</span><br><span class="line">    //7 关闭session</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-结果-1"><a href="#2-2-结果-1" class="headerlink" title="2.2 结果"></a>2.2 结果</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://note.youdao.com/favicon.ico" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate07——Transaction&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate07——Transaction&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate07——T
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SSH与SSM学习之hibernate06——Session</title>
    <link href="http://qiwenming.github.io/hibernate/06/2017/11/19/"/>
    <id>http://qiwenming.github.io/hibernate/06/2017/11/19/</id>
    <published>2017-11-19T13:51:57.000Z</published>
    <updated>2018-01-18T13:51:53.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH与SSM学习之hibernate06——Session"><a href="#SSH与SSM学习之hibernate06——Session" class="headerlink" title="SSH与SSM学习之hibernate06——Session"></a>SSH与SSM学习之hibernate06——Session</h1><h2 id="一、Session"><a href="#一、Session" class="headerlink" title="一、Session"></a>一、Session</h2><p><strong>session对象功能:</strong></p><p>表达hibernate框架与数据库之间的连接(会话).session类似于<br>JDBC年代的connection对象.</p><p>还可以完成对数据库中数据的增删改查操作.</p><p>session是hibernate操作数据库的核心对象</p><p>数据的CRUD操作方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Serializable save(Object object);//增</span><br><span class="line"></span><br><span class="line">void delete(Object object);//删除</span><br><span class="line"></span><br><span class="line">&lt;T&gt; T get(Class&lt;T&gt; entityType, Serializable id);//查询</span><br></pre></td></tr></table></figure><hr><h2 id="二、Session对象的获取"><a href="#二、Session对象的获取" class="headerlink" title="二、Session对象的获取"></a>二、Session对象的获取</h2><p>通过<strong>SessionFactory</strong>工厂来获取的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//3 获取session</span><br><span class="line">Session session = factory.openSession();</span><br></pre></td></tr></table></figure></p><p>如果你想要查看 里面是怎么操作的，那么需要查看 <strong>SessionFactoryImpl</strong>类，如下</p><p><strong>SessionFactoryImpl</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public final class SessionFactoryImpl implements SessionFactoryImplementor &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    public Session openSession() throws HibernateException &#123;</span><br><span class="line">return withOptions().openSession();</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">public SessionBuilderImplementor withOptions() &#123;</span><br><span class="line">return new SessionBuilderImpl( this );</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">    static class SessionBuilderImpl&lt;T extends SessionBuilder&gt; implements SessionBuilderImplementor&lt;T&gt;, SessionCreationOptions &#123;</span><br><span class="line">        ....</span><br><span class="line">        </span><br><span class="line">        @Override</span><br><span class="line">public Session openSession() &#123;</span><br><span class="line">log.tracef( &quot;Opening Hibernate Session.  tenant=%s, owner=%s&quot;, tenantIdentifier, sessionOwner );</span><br><span class="line">final SessionImpl session = new SessionImpl( sessionFactory, this );</span><br><span class="line"></span><br><span class="line">for ( SessionEventListener listener : listeners ) &#123;</span><br><span class="line">session.getEventListenerManager().addListener( listener );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return session;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        ....</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、Session添加数据"><a href="#三、Session添加数据" class="headerlink" title="三、Session添加数据"></a>三、Session添加数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 添加数据</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void insert()&#123;</span><br><span class="line">     // 1. 配置类型安全的准服务注册类，这是当前应用的单例对象，不作修改，所以声明为final</span><br><span class="line">     final StandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure(&quot;hibernate.cfg.xml&quot;).build();</span><br><span class="line">    // 2. 根据服务注册类创建一个元数据资源集，同时构建元数据并生成应用一般唯一的的session工厂</span><br><span class="line">    SessionFactory factory = new MetadataSources(registry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line">    //3 获取session</span><br><span class="line">    Session session = factory.openSession();</span><br><span class="line"></span><br><span class="line">    //4 开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    //--------------------增加数据--------------------</span><br><span class="line">    User user = new User(&quot;qixiaoming&quot;,120);</span><br><span class="line">    //5 保存数据</span><br><span class="line">    session.save(user);</span><br><span class="line">    //或者使用 session.persist(user);</span><br><span class="line">   //----------------------------------------</span><br><span class="line"></span><br><span class="line">    //6 提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //7 关闭session</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库表结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170916231035335?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><hr><h2 id="四、Session查数据"><a href="#四、Session查数据" class="headerlink" title="四、Session查数据"></a>四、Session查数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 查询数据</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void query()&#123;</span><br><span class="line">    // 1. 配置类型安全的准服务注册类，这是当前应用的单例对象，不作修改，所以声明为final</span><br><span class="line">    final StandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure(&quot;hibernate.cfg.xml&quot;).build();</span><br><span class="line">    // 2. 根据服务注册类创建一个元数据资源集，同时构建元数据并生成应用一般唯一的的session工厂</span><br><span class="line">    SessionFactory factory = new MetadataSources(registry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line">    //3 获取session</span><br><span class="line">    Session session = factory.openSession();</span><br><span class="line"></span><br><span class="line">    //4 开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    //--------------------查询数据--------------------</span><br><span class="line">    //5 查询数据 &lt;T&gt; T get(Class&lt;T&gt; entityType, Serializable id);</span><br><span class="line">    User user = session.get(User.class,6);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    //----------------------------------------</span><br><span class="line"></span><br><span class="line">    //6 提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //7 关闭session</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=6, name=&apos;qixiaoming&apos;, age=120&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="五、Session修改数据"><a href="#五、Session修改数据" class="headerlink" title="五、Session修改数据"></a>五、Session修改数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 修改数据</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void update()&#123;</span><br><span class="line">    // 1. 配置类型安全的准服务注册类，这是当前应用的单例对象，不作修改，所以声明为final</span><br><span class="line">    final StandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure(&quot;hibernate.cfg.xml&quot;).build();</span><br><span class="line">    // 2. 根据服务注册类创建一个元数据资源集，同时构建元数据并生成应用一般唯一的的session工厂</span><br><span class="line">    SessionFactory factory = new MetadataSources(registry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line">    //3 获取session</span><br><span class="line">    Session session = factory.openSession();</span><br><span class="line"></span><br><span class="line">    //4 开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    //--------------------修改数据--------------------</span><br><span class="line">    //5 查询数据 &lt;T&gt; T get(Class&lt;T&gt; entityType, Serializable id);</span><br><span class="line">    User user = session.get(User.class,6);</span><br><span class="line">    //修改数据</span><br><span class="line">    user.setName(&quot;杞文明&quot;);</span><br><span class="line">    //----------------------------------------</span><br><span class="line"></span><br><span class="line">    //6 提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //7 关闭session</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库表结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170916231051608?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure><hr><h2 id="六、Session删除数据"><a href="#六、Session删除数据" class="headerlink" title="六、Session删除数据"></a>六、Session删除数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 删除数据</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void delete()&#123;</span><br><span class="line">    // 1. 配置类型安全的准服务注册类，这是当前应用的单例对象，不作修改，所以声明为final</span><br><span class="line">    final StandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure(&quot;hibernate.cfg.xml&quot;).build();</span><br><span class="line">    // 2. 根据服务注册类创建一个元数据资源集，同时构建元数据并生成应用一般唯一的的session工厂</span><br><span class="line">    SessionFactory factory = new MetadataSources(registry).buildMetadata().buildSessionFactory();</span><br><span class="line"></span><br><span class="line">    //3 获取session</span><br><span class="line">    Session session = factory.openSession();</span><br><span class="line"></span><br><span class="line">    //4 开启事务</span><br><span class="line">    Transaction t = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">    //--------------------删除数据--------------------</span><br><span class="line">    //5 查询数据 &lt;T&gt; T get(Class&lt;T&gt; entityType, Serializable id);</span><br><span class="line">    User user = session.get(User.class,6);</span><br><span class="line">    // 删除数据</span><br><span class="line">    session.delete(user);</span><br><span class="line">    //----------------------------------------</span><br><span class="line"></span><br><span class="line">    //6 提交事务</span><br><span class="line">    t.commit();</span><br><span class="line">    //7 关闭session</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库表结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.blog.csdn.net/20170916231107496?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcWl3ZW5taW5nc2hpd28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述" title="">                </div>                <div class="image-caption">这里写图片描述</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH与SSM学习之hibernate06——Session&quot;&gt;&lt;a href=&quot;#SSH与SSM学习之hibernate06——Session&quot; class=&quot;headerlink&quot; title=&quot;SSH与SSM学习之hibernate06——Session&quot;&gt;
      
    
    </summary>
    
      <category term="ssm" scheme="http://qiwenming.github.io/categories/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/categories/ssm/hibernate/"/>
    
    
      <category term="ssm" scheme="http://qiwenming.github.io/tags/ssm/"/>
    
      <category term="hibernate" scheme="http://qiwenming.github.io/tags/hibernate/"/>
    
  </entry>
  
</feed>
